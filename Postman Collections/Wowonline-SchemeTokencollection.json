{
  "info": {
    "_postman_id": "c8142faa-a23d-43db-b381-da5303cef53a",
    "name": "SchemeToken TestCases-V2",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "WowOnline-SchemeToken-V2",
      "item": [
        {
          "name": "Add Card- My Account Page(Verify=False)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e3001c4c-141f-407a-affa-0f711a155dc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      " \r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "64622918-d131-48dd-bd22-f538d4d7033a"
                  }
                }
              ],
              "_postman_id": "5c28a64f-b818-48cd-8092-218ab69f22c9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "     try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "   \r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "504ed67a-0112-4a17-83c8-3f1a3e3bc829"
                  }
                }
              ],
              "_postman_id": "ef9cf403-5f5e-4452-a251-97632cec631f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "de1d308e-f5d2-4b17-9505-beff9df0aadf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "812571bf-e5a1-45c4-9046-63e766e39956"
                  }
                }
              ],
              "_postman_id": "03fe9b5d-8740-439f-a6f9-1b9a464f4503",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize with Verify=False",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ed912643-ae44-4c16-be89-4e83b9f6944c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7e262cab-8124-4a3d-a190-b81e0647d3b8"
                  }
                }
              ],
              "_postman_id": "37374157-bae0-4a41-9959-a4c2a4d830bf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "288efa86-6d6f-4c70-aeba-6c5a971da856"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "     try{\r",
                      "          pm.response.to.have.status(200);\r",
                      "          pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "// pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "            throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3bfa01d4-074c-41a5-883f-2c827f886d4f"
                  }
                }
              ],
              "_postman_id": "8a761a68-62e6-43d1-8b4b-5d24d75ed11c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "_postman_id": "1eaa7003-d83a-47de-87a6-aabaa22705c7",
          "_postman_isSubFolder": true
        },
        {
          "name": "Add Card -My Account Page (Verify=True)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7f43ebc3-352e-420d-9a10-9d1f4b73025d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e9ba9080-d22a-41d0-bf6d-ab9daf1078d3"
                  }
                }
              ],
              "_postman_id": "e1ebbb8d-5513-4003-8983-b5d73687eaec",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "        }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "35da8b4f-63da-4e21-857e-c501ffd65b14"
                  }
                }
              ],
              "_postman_id": "12c042e2-b7a0-45c0-8812-5d68ca412351",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b3d66cfe-d0ac-4d4a-b410-0588eb9d8f90"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4c3173a6-0f26-47d2-9a1f-233775cb6836"
                  }
                }
              ],
              "_postman_id": "0f764132-2c3d-45dd-b3f6-b5b0a1030785",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize with Verify=True",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "07202425-9c30-40fb-b78c-4085ff19599c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bebe92ff-6139-41ef-9c36-2354b6132c45"
                  }
                }
              ],
              "_postman_id": "a809fad0-e470-4427-8189-2a46a58c4d43",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [20000]);"
                    ],
                    "type": "text/javascript",
                    "id": "c6a4cd70-4f1b-4eec-afc1-70913671b8db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1f4c1b93-763a-4a15-9c37-fae2e1f5239a"
                  }
                }
              ],
              "_postman_id": "e37d680b-0879-414a-a95a-7c9a3a5bc3d3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "_postman_id": "a234fddc-06a3-4be7-a3af-07349924e17f",
          "_postman_isSubFolder": true
        },
        {
          "name": "Add card - My Account Page (Duplicate Card with Verify=False)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f2d7a959-2c13-4264-ac60-851fd5d44e8b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "e758fd40-c9db-4875-96c9-1f43a5d70470"
                  }
                }
              ],
              "_postman_id": "2896b4ff-dd7d-436b-a54f-039afa4f5b33",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c81d7843-4c23-4363-aebf-6879a37bac1d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "060e4306-0a0b-4271-9082-914e8c96e24c"
                  }
                }
              ],
              "_postman_id": "f9d497a8-df4e-4c7d-841c-b5d9750db16d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9d02380e-490e-48b5-8d95-3d9c8191ef03"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "979cf304-a9a3-4960-9c16-8275995a7f03"
                  }
                }
              ],
              "_postman_id": "4f687af8-279d-434c-8a8d-88f708c9ac95",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "82a60eff-5b9b-49ae-b696-5ebb402cdeed"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "286f8ce5-c062-4873-a381-d4942f3099b4"
                  }
                }
              ],
              "_postman_id": "d21a757c-7f35-459a-b75e-69ae6f09b3bc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "955338bf-16e1-4a87-9de1-9465825a10cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "dc101553-00a4-4d0b-8920-2b7e8b1e9ab9"
                  }
                }
              ],
              "_postman_id": "38f8965a-28e5-42be-8561-170df2c22ce2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3a97b772-b0da-4df2-9782-864b59fd78d7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e7abd451-ed1d-4a69-b3a1-859ba2b65434"
                  }
                }
              ],
              "_postman_id": "3ee00644-719e-4e7d-a420-c4359e595f33",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "7d866205-5d2f-4ae8-accb-32910bb18380"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "   pm.collectionVariables.clear();\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    pm.collectionVariables.clear();\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "84ff2be6-d9e2-4645-b40b-fcce14f9b5a2"
                  }
                }
              ],
              "_postman_id": "f6366ba8-328e-42c4-8151-abfed1cda732",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "_postman_id": "2bbb658b-5552-426c-8543-9126bb868e60",
          "_postman_isSubFolder": true
        },
        {
          "name": "Add card - My Account Page (Duplicate Card with different expiry)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2942bad9-d5d4-4d2f-b6a1-4bbd9712804b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "01d6c09b-1b66-42d5-9758-5a40dd10f365"
                  }
                }
              ],
              "_postman_id": "f36c0ff6-aba6-4863-bf11-f2171f24f9d9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "11c1b8b0-8295-48df-8254-8ac4834aa39f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5eb11c2f-56c5-477e-974b-dee2b7ee491b"
                  }
                }
              ],
              "_postman_id": "591950f7-ddb7-4523-a200-588277d0707a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a17dc4e9-70b1-431f-8d2e-dc52b2f2b1d8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d4c9dd18-a13e-466e-a22d-3ffabb6aa2d0"
                  }
                }
              ],
              "_postman_id": "965920e6-46b9-4bb7-b6ee-23b4b7153e43",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "caced5db-80cd-443d-858b-986f6accfc2a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"expiryMonth\",jsonData.creditCards[0].expiryMonth);\r",
                      "    pm.collectionVariables.set(\"expiryYear\",jsonData.creditCards[0].expiryYear);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "63971167-f058-4606-9e46-1ea42619aec1"
                  }
                }
              ],
              "_postman_id": "e31dfab6-c8f8-4be3-839e-ad77dfe5f4ee",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5794fa55-8298-45df-b294-ef417c21cd52"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "5c1fc320-21da-4f39-99a3-c821c9b84ccd"
                  }
                }
              ],
              "_postman_id": "574184c4-562e-4119-a98c-d1212711ec64",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "05d52fdd-93a9-4871-9d7b-b7eb71f70b37"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5e9deb16-c67d-477b-b8cc-cb3f769797cc"
                  }
                }
              ],
              "_postman_id": "6dbcc585-116b-4b96-a6f2-5e539942ff3d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"11\",\r\n\"ee\": \"77\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "e9e2156f-e8bb-448b-bb8d-ff605fc7b0a9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\")); // will ensure duplcate item id is not added in the wallet\r",
                      "   const updatedExpiryYear= jsonData.creditCards[0].expiryYear;\r",
                      "   const updatedExpiryMonth=jsonData.creditCards[0].expiryMonth;\r",
                      "   pm.expect(pm.collectionVariables.get(\"expiryMonth\")).to.not.eql(updatedExpiryMonth); //will ensure that expiry details are updated\r",
                      "   pm.expect(pm.collectionVariables.get(\"expiryYear\")).to.not.eql(updatedExpiryYear);\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "   pm.collectionVariables.clear();\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    pm.collectionVariables.clear();\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ee5c0d7b-7626-4f5c-9de1-2f47c53a4fe6"
                  }
                }
              ],
              "_postman_id": "04e7f8c6-631d-478a-84e8-929fac91a454",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "_postman_id": "92a4ea2f-4e7f-4ff3-a1a2-7c0db5011f0d",
          "_postman_isSubFolder": true
        },
        {
          "name": "Add card - My Account Page (Duplicate Card with Verify=True)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "caaec7ea-cca8-490e-8ee1-70ff79eb6a6f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "2138ee0d-4168-44a9-93c1-8331f9fcd496"
                  }
                }
              ],
              "_postman_id": "36f64f4a-64d2-466c-ba54-8917e600bd29",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "const response=pm.response.status;\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "41fda132-5072-44f4-b092-876f755683d8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8efe2124-5f56-42ba-b3a1-6a9f5fba2164"
                  }
                }
              ],
              "_postman_id": "d6242f96-065e-4710-b904-7d4314826e52",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "50162c7b-c316-4787-bdd6-61a7c6c84bd9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ab875364-bb5f-4a4b-adcc-77a22b51db6e"
                  }
                }
              ],
              "_postman_id": "c7f4d223-a076-43e5-b23a-43518ba122d0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "e57a2051-4a49-41e2-8072-0474d921a5f1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"expiryMonth\",jsonData.creditCards[0].expiryMonth);\r",
                      "    pm.collectionVariables.set(\"expiryYear\",jsonData.creditCards[0].expiryYear);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e17254f6-9e1d-41f9-b3f0-cb4f26d8701a"
                  }
                }
              ],
              "_postman_id": "6ed6a8e0-e0f1-471d-8c65-af70b1f59e99",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e8c0d762-b580-4a34-849f-ffb9a8844e78"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "e1d307e7-a373-4d03-8ca6-be9b9bf1442e"
                  }
                }
              ],
              "_postman_id": "aa12169a-2cd6-4593-a506-028da1440c35",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "200b5934-6654-487e-bfc0-34230455a19b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1b5bd486-bf5d-4c93-83c5-4f1423206f06"
                  }
                }
              ],
              "_postman_id": "ca8bc35b-5c16-4f97-a240-5dc86a90fbb1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"11\",\r\n\"ee\": \"77\",\r\n\"save\": \"true\",\r\n\"verify\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [5000]);"
                    ],
                    "type": "text/javascript",
                    "id": "793fca62-41c1-4f66-809e-5dffc083d613"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\")); // Will ensure that duplicate card is not added in the wallet\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2f14f677-2d5e-4e78-924d-fcd5036b5cb9"
                  }
                }
              ],
              "_postman_id": "6291725e-e014-4ff1-94af-4e7a179d213f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.variables.set(\"clientReference\",string);\r",
                      "pm.variables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "bcc08dbc-1fb2-4159-a7b2-0602011a98eb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\"); \r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "85710af9-9c85-49a1-8fe5-fe2606027b27"
                  }
                }
              ],
              "_postman_id": "d679f5ff-fae4-45b8-99a8-f28ac09699a1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "51b4a7e4-480e-49ef-b764-9ba5b2159e65",
          "_postman_isSubFolder": true
        },
        {
          "name": "Update Card Details (expiry date)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "50d67617-0491-4534-b30e-c6a8f61a5b7f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      " \r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8acc8f25-8d3f-409b-9f88-558f5405a631"
                  }
                }
              ],
              "_postman_id": "82734da2-b41c-4701-b7f6-2d9f9cb2608f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);}\r",
                      "     catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d00846f4-c4c2-4e6f-9c5b-793eb5ce4ce1"
                  }
                }
              ],
              "_postman_id": "b3c019b1-ed90-4304-94c3-5fa91fe6c00e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1215d7a8-3499-4341-9308-877e66212d39"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "42c763e3-48b5-4287-bd45-a09c9236fa5d"
                  }
                }
              ],
              "_postman_id": "efb524eb-1930-41cb-b447-820ec342721c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "00385770-e48a-448b-a62a-5c7f3cf946c6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f76e0d8c-1701-47cc-850a-d22b393e6980"
                  }
                }
              ],
              "_postman_id": "732d8552-0241-470d-aff1-b93a6573d95c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f111a026-31b2-48b9-b018-6dc586465c80"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "         pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0cef7f80-85be-4c84-882d-f21725d61ee1"
                  }
                }
              ],
              "_postman_id": "609c0e1f-8d7b-4394-b372-c973a9cdccbb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6a879fdd-a457-46a8-a0cf-e79bdb5a079e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c145dd60-8c5c-4714-99c8-4149ca746a3e"
                  }
                }
              ],
              "_postman_id": "d2a62852-f928-405c-9916-0753f3f3afd4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card - Payment Instrument Exist",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "02d46ae5-7df9-468a-874b-2653bb25cbb5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify CreditCard Tokenisation returns 200 \",()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData.status.esResponse.text).equal(\"ACCEPTED PAYMENT INSTRUMENT ALREADY EXISTS IN ACCOUNT\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "setTimeout(function(){}, 50000);"
                    ],
                    "type": "text/javascript",
                    "id": "b20cab55-8c9f-4149-8463-643b7714ef99"
                  }
                }
              ],
              "_postman_id": "b5599f19-0430-4e83-ab05-d82742acf3e3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"11\",\r\n\"ee\": \"25\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "89819063-546e-41a2-893f-4856c37d97db"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "182d94d4-fd3c-4424-ac18-752c1ba0cee1"
                  }
                }
              ],
              "_postman_id": "4527ca2f-dc52-4437-bd73-d2fc8cf03789",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bbf072fe-7c0b-4b8c-bcaf-96d7f31ea2b5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.clear()\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "            pm.collectionVariables.clear()\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "65f1ff20-488a-4a93-92ce-28054da13cf6"
                  }
                }
              ],
              "_postman_id": "3face20f-a0ed-47ed-8f52-90ed463a3962",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{itemID}}"
              },
              "response": []
            }
          ],
          "_postman_id": "7b7a037a-a068-4a2f-bb4b-64df4a1e4c6e",
          "_postman_isSubFolder": true
        },
        {
          "name": "Update Card Details (cvv)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1803fec5-d84f-4410-9e5b-40106c8a2bd8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      " \r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4b33edc6-5a18-4f8e-9dda-cc716439304d"
                  }
                }
              ],
              "_postman_id": "67d55e8a-4ac4-4e5c-9db5-13003318e5dd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);}\r",
                      "     catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a48bdb1c-06d6-418c-94d7-1d81c73e87d1"
                  }
                }
              ],
              "_postman_id": "053b6e61-0c59-4dea-9442-5fd390612fa4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "52b83462-aa09-4687-aa18-2de05a286189"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "911d71d4-6963-4e10-bf1e-7afc83b151bb"
                  }
                }
              ],
              "_postman_id": "ce6f382b-8ea7-408d-b185-b3ae5b8fea31",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9a6e415c-e051-4b08-8d20-2d333de90ab5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0b1c631e-31f0-44a3-99be-cb1aefb318cb"
                  }
                }
              ],
              "_postman_id": "cc8610fc-9ecd-461f-a085-3a60c13f221d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "21622858-3b8c-481a-b2b8-fbb50b5bd101"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "         pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d71d4a56-7f4c-4dc4-9a7e-9a2dbdb4b384"
                  }
                }
              ],
              "_postman_id": "8345a132-fb41-48ea-9d3f-abc63f02419f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5090bb15-f2aa-407e-be0b-7e19e9808f2e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6bbc30f9-637f-456d-bfdf-8c194ca88723"
                  }
                }
              ],
              "_postman_id": "51dddb06-c9c0-404b-a7ff-d47f81de9646",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card - Payment Instrument Exist",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0fd77441-8ace-4973-b1c9-3813730752d8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify CreditCard Tokenisation returns 200 \",()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData.status.esResponse.text).equal(\"ACCEPTED PAYMENT INSTRUMENT ALREADY EXISTS IN ACCOUNT\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "setTimeout(function(){}, 50000);"
                    ],
                    "type": "text/javascript",
                    "id": "92948d27-6af1-40ca-ab03-0f140b5bafe6"
                  }
                }
              ],
              "_postman_id": "b96d3e71-5b48-4eb0-b90f-fd9559d09687",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "41a869a9-2d4c-4b81-8e18-c4499206efe5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4ef7ae0f-7ac8-4cf9-8b8e-c4ffe821eb2f"
                  }
                }
              ],
              "_postman_id": "c88c25ea-52a4-4047-a48a-b5c4da374909",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1594bcfa-2d6f-4277-988b-a4bd726f3148"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.clear()\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "            pm.collectionVariables.clear()\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a77c6bb3-0eee-442c-b2ea-c6d547648cc7"
                  }
                }
              ],
              "_postman_id": "a28610fc-e214-4610-a265-2656fa419f87",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{itemID}}"
              },
              "response": []
            }
          ],
          "_postman_id": "9be82edf-898c-4e64-b80d-0f1409e1230a",
          "_postman_isSubFolder": true
        },
        {
          "name": "Check out flow - New Card Place Order",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5ddebdf8-111e-48e0-b352-13cd8509e4df"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1eb6ce0c-b065-4766-8c35-788bcc25e66f"
                  }
                }
              ],
              "_postman_id": "86bc685e-7512-468b-ab6c-8cd4dc0ef66b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "6bdf52b8-d26e-403b-9003-c620b915b9cd"
                  }
                }
              ],
              "_postman_id": "148c4328-21c0-4aa7-9a7c-90bf4d8dc506",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f49cb8bf-4805-4cac-99b6-69304556e994"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a09376cd-be17-4b50-b7e2-4618b8ada31d"
                  }
                }
              ],
              "_postman_id": "15e4f1cc-789c-4a97-bdd2-72afc2640fd2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize with Verify=False",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e6f45e79-e744-452f-9dc0-95ffbca0f8bc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "39e161ed-40e7-4856-9341-376468852e26"
                  }
                }
              ],
              "_postman_id": "7363ebdb-c937-43dd-8d81-a457bfeac266",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2c5c3e00-3c26-41e9-9753-d68f3d086de3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fd5315c3-c328-4ca7-b856-4d9fe3e2b747"
                  }
                }
              ],
              "_postman_id": "5796b0ab-f4c2-474f-beec-2d200d9a8b4b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);\r",
                      "setTimeout(function(){}, 10000);"
                    ],
                    "type": "text/javascript",
                    "id": "2ada8bba-d723-4ee7-b355-0a8e81dc0e4e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      " const jsonData = pm.response.json();\r",
                      " const statusCode= pm.response.code;\r",
                      "\r",
                      "   pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      "   if(statusCode==200){\r",
                      "    pm.test(\"Verify Preauth Transaction is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - New Card Place Order\");\r",
                      "}\r",
                      "function payments(){\r",
                      "    try{\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]); \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "        throw e;\r",
                      "}\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4b28dbf9-798e-49c6-acc1-914bfbe3d319"
                  }
                }
              ],
              "_postman_id": "d6e66695-027e-4a7d-b9ce-7fcba32ce52b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\":\"{{clientReference}}\",\r\n\t\t\t\"orderNumber\": \"{{orderNumber}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9b2d8b19-0a7b-40eb-9c2c-1fcab97b21ad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "28028fef-9db4-4ced-b468-cb273feb7dcd"
                  }
                }
              ],
              "_postman_id": "f6a36b8e-32e4-4c29-9acd-cebf7228eb29",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{itemID}}"
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0132035b-23be-4c6a-be73-79a52bfbb660"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.returned).to.eql(Number(1));\r",
                      "     pm.collectionVariables.clear();}\r",
                      "    catch(e) {\r",
                      "      pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "64cc0e40-d373-41bd-b7d9-4efb4e146723"
                  }
                }
              ],
              "_postman_id": "d3541879-4e96-491c-b7a8-c648551d44c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "82738db6-ea9d-4994-8f72-4161d0c8a824",
          "_postman_isSubFolder": true
        },
        {
          "name": "Check out flow - Duplicate Card Place Order",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2bfc0e15-6c6f-4a9f-8db6-ef988a37a670"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "6cf34fd9-f53d-407b-9a5e-1a1d4a457fac"
                  }
                }
              ],
              "_postman_id": "b721f290-3e20-48bc-bb9c-cc9907bef351",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ce27bc87-f8a5-4b0d-9ac5-4c859ece27ef"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "661e6e72-bce2-4a58-ad4b-0cf51d5de8e3"
                  }
                }
              ],
              "_postman_id": "c6e190ce-bd82-4e6c-9f5e-06ab900fda02",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7500a5ef-a517-4447-b500-cbf0a110bcaf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ded0ea5b-a4fe-4236-b4fc-e069a763c902"
                  }
                }
              ],
              "_postman_id": "c4bf1558-21f3-4008-bcda-77d0fffb1910",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "7c672bbc-2bb9-4b11-aad3-fbc30482b5b9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "60e8a421-1dc8-40a0-be42-4b8c9043fccb"
                  }
                }
              ],
              "_postman_id": "cbc3ceb4-41be-4e42-8682-5e923d6a5b59",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "46a49fe5-9fb3-44b6-b7fc-0be5f3b46f46"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "c6a0daed-25db-4e4f-8cdd-79e859baab4b"
                  }
                }
              ],
              "_postman_id": "cf2647ae-93d3-4afb-a83b-16a9a5d902d6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d51fbc2d-f16c-4900-b842-62ef8d3e53de"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4d40e4ec-84f7-4e76-8ed4-fa3a2c6beee1"
                  }
                }
              ],
              "_postman_id": "6569b5d1-afcb-4cdf-9335-9730dbe3e0f5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "e7d9077a-45ef-4a73-a92a-63feb4b8675c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3414aef3-44fe-4f61-9538-c51bad9afaa4"
                  }
                }
              ],
              "_postman_id": "749b7b6d-09e9-491e-ad75-a695fedcc3d9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8125f15e-b9f0-4495-aa1d-7db5436ba669"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3b8528d0-42bb-4033-b433-f177c77f04f4"
                  }
                }
              ],
              "_postman_id": "d0cbfafa-0345-43fc-a49e-b5afffceb673",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2c71474d-6a05-4ee6-9e7b-a745a038c1a3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card after performing the payment is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card after performing the payment is \"+\"VERIFIED\");\r",
                      "    pm.expect(\"The allowed flag status after performing the payment is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after performing the payment is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after performing the payment is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after performing the payment is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after performing the payment is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after performing the payment is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after performing the payment is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after performing the payment is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b4b2da4f-2a4d-4634-b295-0cb24171fc03"
                  }
                }
              ],
              "_postman_id": "921c3266-c350-4c40-a7e4-0ccff85a6653",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "42a2ab55-2240-4d11-81ab-9a26aac43a09"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8ace78d8-6484-4ba9-adc8-c9e015020a7c"
                  }
                }
              ],
              "_postman_id": "3fd3db10-0c43-429f-9954-97c79780bc60",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "636eb74e-be0c-4a00-a668-862f4961181a",
          "_postman_isSubFolder": true
        },
        {
          "name": "Check Out flow - Transient Card",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f693e3e6-dc75-44a4-ac6c-231944ccd4a4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "701c9f91-bb17-4056-81b6-a6b03f0777d6"
                  }
                }
              ],
              "_postman_id": "79ce7333-e999-4d67-a7c2-b43d1005adb8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d2aa631e-a15a-40f4-a748-e5b8d3bff9ab"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "38f4398a-7569-45fd-afa2-4ef4c017c83c"
                  }
                }
              ],
              "_postman_id": "c21af869-839d-4ae9-87f4-fe7a7a85a341",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cfb3d397-5a05-42ab-a184-46d905384176"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.set(\"itemID\",jsonData.paymentInstrument.itemId); \r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3e05d1f5-d25a-4378-b901-df03ae64a427"
                  }
                }
              ],
              "_postman_id": "c8f421c4-0493-4204-b1a5-7b5c51216ba7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"false\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "574104f2-9b87-45d9-b835-8d07afcc1e78"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.creditCards.length).to.eql(0);\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0c5003a5-2c6c-4b8a-b78f-6ff394cd5d8e"
                  }
                }
              ],
              "_postman_id": "2ca20f9a-3d2f-417d-a021-4d9a8e3c7a0f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b8c15cfb-86a7-4248-970d-6d9bef661728"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      " const statusCode= pm.response.code;\r",
                      "\r",
                      "   pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify Preauth Transaction is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - Transcient Card\");\r",
                      "}\r",
                      "function payments(){\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]); \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "        throw e;\r",
                      "}\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "dad5bf09-e3eb-4320-8197-b5e2b9ac7bd0"
                  }
                }
              ],
              "_postman_id": "e8350b5c-84fd-4a10-a762-72d45c1c359a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Completion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "95bfd91a-c86c-4842-bce5-da53ccdbbd39"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "   \r",
                      "  if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    completion();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function completion(){\r",
                      "     try{\r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.set(\"CreditCardCompletionRef\", jsonData.completionResponses[0].completionTransactionRef); \r",
                      "        pm.expect(jsonData.completionResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "        pm.expect(jsonData.completionResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw(e);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "733109f4-66c5-4c97-9ec8-64b76382d8e5"
                  }
                }
              ],
              "_postman_id": "53c22f7a-29d1-4605-8c8f-cb20b6b33956",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"completions\":\r\n   [\r\n     {\r\n      \"paymentTransactionRef\": \"{{CreditCardPreauthTransactionRef}}\",\r\n      \"amount\": {{Amount}}\r\n     }\r\n   ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/completions?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "completions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Refund",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e49c495e-0c82-46b0-9e3c-8f4d6118b6df"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      " pm.test(\"Verify status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    Refund();\r",
                      "   });\r",
                      "} else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund(){\r",
                      " try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw(e);\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4ceca0ec-ab39-418d-95f9-48c503ff9a5f"
                  }
                }
              ],
              "_postman_id": "f37d53ed-2ab6-4642-916a-a336cff6cb31",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{CreditCardCompletionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c84433da-19f8-4bc7-9613-6c37fcb13fea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Preauth Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const preauthReferenceNumber =pm.collectionVariables.get(\"CreditCardPreauthTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(preauthReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PREAUTH\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"CreditCardPreauthTransactionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify Completion Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const completionReferenceNumber =pm.collectionVariables.get(\"CreditCardCompletionRef\"); \r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(completionReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"COMPLETION\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"CreditCardCompletionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    verifySchema();\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "    pm.expect(pm.collectionVariables.get(\"creditCardRefundRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].cardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "42e2c9af-0e29-47e0-a6b1-8f31369326b0"
                  }
                }
              ],
              "_postman_id": "d290b952-f971-44a8-83aa-32bb57a798d2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment - Transcient Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.variables.set(\"clientReference\",string);\r",
                      "pm.variables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "6eeff7a6-ca93-4cde-a29e-ec7e6e7bed70"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify card is not saved in the wallet \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(400);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BI24\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"NO MATCHING RECORD FOUND.\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7983001d-a7a0-48e7-8d2c-134fbed3faa5"
                  }
                }
              ],
              "_postman_id": "44ca1171-8c51-41e0-a99f-6a42be937511",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "c11f3f6b-827a-4cc2-800e-23c39734e58f",
          "_postman_isSubFolder": true
        },
        {
          "name": "Checkout out flow - Transcient Card- Duplicate",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e341ca99-9710-4250-9cbd-a47a0e4b3242"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4b378800-7ff5-4671-b832-878358cb28e8"
                  }
                }
              ],
              "_postman_id": "b6cfb852-4d75-4c63-ba4d-f95fbd412b45",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "95d97790-1680-486e-a84e-be69a92a7409"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "447be9ef-9fc1-4939-ab5f-9824389f71b0"
                  }
                }
              ],
              "_postman_id": "44f20387-f1c9-4077-8903-d0a6bd6cf509",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5b2abd0d-676c-4f65-ba43-5ea913faca8f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "aeacd714-f719-440c-9374-fd4101820cc3"
                  }
                }
              ],
              "_postman_id": "d65ee4ba-71f1-43b8-921e-fc6ad1f7fa92",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "4d027f84-d4d8-4d5f-8b76-67f5bde11d44"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ad775c43-9050-4c5c-b9e9-e87173b9f8a3"
                  }
                }
              ],
              "_postman_id": "e7cf422f-bbc2-48c9-8e40-e312a5f07721",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "be2c6f8e-a2d1-407b-88fd-c3acf817e17b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "88fc64ed-2920-42ed-af4a-fa0df6757713"
                  }
                }
              ],
              "_postman_id": "1d398ffb-83df-4208-93a4-627f682a3219",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a7c9fbe9-37cf-40b9-b12d-3c94ae74ed9d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ccaeed7a-4fd1-4c75-a398-914350f6e402"
                  }
                }
              ],
              "_postman_id": "9789da0c-9699-4d5e-a44e-df3f3bdc3d8c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"false\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "e0b8c1bc-f849-4d72-999f-5d3f40f43136"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId); \r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));    \r",
                      "   //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6270c87b-380f-4762-b2a2-894b4e2136e1"
                  }
                }
              ],
              "_postman_id": "d79ef4ce-51b0-4416-9db0-a2dae52eab35",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1ada2d82-999f-4778-a37f-cc2fc373d982"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2ecc4cad-eb82-4f82-9f7e-b2b937106792"
                  }
                }
              ],
              "_postman_id": "550b2d55-0984-4758-b0fb-119df173606b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "ca73ceac-0d6e-4778-9aee-cff37c85d4d4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);     \r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "45c4fda5-ec6d-498e-84e9-637d38b39c8e"
                  }
                }
              ],
              "_postman_id": "145060a8-eb1f-456a-a030-09167d43c1f2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "338613ec-56dd-48f3-b993-c31c31fa81ea"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "68d1a1c6-ec58-434b-875f-9ff9cfe9ccb7"
                  }
                }
              ],
              "_postman_id": "67e903ab-8620-42b4-a25c-24760c2f0d10",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "27b36c58-12af-495e-8e50-e51274bcccee",
          "_postman_isSubFolder": true
        },
        {
          "name": "Check Out flow - Saved Card",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "adb291a2-eda3-4c72-a5fd-799e505f1ee4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6b3e224e-0dac-4694-bbd7-3509fe20aa87"
                  }
                }
              ],
              "_postman_id": "f61f3bf5-205f-42ea-a824-eda7fd3eeec0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5027edd8-2edc-41e6-ad31-c1ceda8c0141"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "03de0e3e-f02d-43db-8875-789cb1157bab"
                  }
                }
              ],
              "_postman_id": "4c1656f4-6fe4-4f88-8200-2b18880b1454",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "619e8647-1c20-4a3e-9ea0-e1d34e5bb59f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "49409bc1-38b6-49c7-bc05-4942fbab950c"
                  }
                }
              ],
              "_postman_id": "9a57ee75-3896-47ce-8a23-dd660f92fb0d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ccb1902f-15e9-4a3c-ab3c-e99f83426b4c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "      let messageString = pm.response.json().creditCards[0].stepUp.url;\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "  pm.collectionVariables.set(\"sessionID\", messageString.split('/')[6]);\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a31fa3d9-d4ed-4d0f-ad7c-dedc7a2c9d61"
                  }
                }
              ],
              "_postman_id": "47f0ecba-26e6-4b59-98c6-c0846176f2e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);\r",
                      "setTimeout(function(){}, 10000);"
                    ],
                    "type": "text/javascript",
                    "id": "498854a8-50df-487e-b164-1568ddeafd16"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify transaction after performing 1 cent verification \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    //pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    //pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d3516ead-4fc1-4d2e-9bd0-27b855a5b41a"
                  }
                }
              ],
              "_postman_id": "097bc288-1450-4db4-a893-8f99cddd8656",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\":\"{{clientReference}}\",\r\n\t\t\t\"orderNumber\": \"{{orderNumber}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CVVandExpiyTokenization",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9111c371-a718-437c-9205-191d2414c0d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "    }catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f2645616-2fd7-4fcb-8717-3121462f1917"
                  }
                }
              ],
              "_postman_id": "c31758c9-f356-48bb-afda-981637934d9c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": \"{{itemID}}\",\r\n  \"scheme\": \"VISA\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "7eb69d20-2674-46fc-b4ae-4fe4679fa29f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      " \r",
                      "    } catch(e) {\r",
                      "\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3b749d01-8c76-41a7-9d12-02d332a63135"
                  }
                }
              ],
              "_postman_id": "95bfff5a-fab2-4acd-858f-8c452db55af6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "db0cbf8f-4eee-4e2c-8b4d-d42f44c38166"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);     \r",
                      "   pm.expect(\"The status of the Card After Payment is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Payment is \"+\"UNVERIFIED_PERSISTENT\");    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c475342b-13ef-426c-bf12-a026c2f0e319"
                  }
                }
              ],
              "_postman_id": "11d80633-a829-4a13-8dc2-72caf3140462",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "cb16aea7-7eff-43b7-905f-4f63ae129e3f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "            pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "                pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d36cef3b-998a-4ad8-b4a9-36f6fa65dbab"
                  }
                }
              ],
              "_postman_id": "b6f64d63-4ee2-4426-bf35-1ac15f268803",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}},\r\n            \"stepUpToken\": \"{{stepUpToken}}\"\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "a3b81de0-d755-4249-ad1a-ab0a45e1dd67",
          "_postman_isSubFolder": true
        },
        {
          "name": "Create Payment Agreement - New Card With no immediate charge",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b23f47fe-c7a2-4544-9ff8-4abacd1d7643"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c4496016-e06e-4225-86ec-24071f8fd7b7"
                  }
                }
              ],
              "_postman_id": "98510eca-8ead-4a1e-ab32-10ee67f450b9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function() {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b52a623d-243f-4fe2-b73c-508d51f66adb"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "aa3449a9-a254-4b02-a4f9-33a659857801"
                  }
                }
              ],
              "_postman_id": "cce027c0-1970-4e74-b63c-8b67e3980788",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "66c3feec-d3a0-4fda-9f9a-ff587aab732f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e5483df9-bcbc-4d10-95c2-729338541ead"
                  }
                }
              ],
              "_postman_id": "adf0c9e7-1a91-4a82-bd74-ccedfa4c59da",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8745224b-affc-44ad-af5b-72d2bec080f6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f60c8c4a-bfe5-4590-8210-1f5a8fd9821a"
                  }
                }
              ],
              "_postman_id": "a28627a8-02de-4451-b7a4-3e58598ea61e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7f3150a6-9e4f-4173-8f8f-c44189d88b5d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b2107646-3333-43c2-80d7-7533d0e0c742"
                  }
                }
              ],
              "_postman_id": "0def9919-6c6c-4f8d-a831-a64c5eb1e27c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "516ed396-420c-4591-bdc5-0ed3be4f791e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "7eebe9fd-7bd8-4d1c-ad24-ffe06553b149"
                  }
                }
              ],
              "_postman_id": "57f9b8d5-85ca-4b59-a886-416015f5d6df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "1896821b-4d3b-44d5-a238-a19703634a97"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "23017fbf-c48f-4e7e-b040-bbd821118558"
                  }
                }
              ],
              "_postman_id": "61c6192a-2dc4-4cfd-afb5-524697b3dcf4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "2c691182-8bee-47e8-a5cf-263303d16afb",
          "_postman_isSubFolder": true
        },
        {
          "name": "Create Payment Agreement - Duplicate card With no immediate payment",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify IDM Login statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3cd8223b-1d02-4c2d-8825-86e55f6d44ac"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "45f6ace4-45a2-4993-850b-ce19fe7a282b"
                  }
                }
              ],
              "_postman_id": "f0d21f7a-c8ee-4de5-ac14-2ecb4e9f47b9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "26dbe08c-342f-441f-a033-cf8278e9832e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b9de1a7c-6e1e-424e-a933-00e84805f47b"
                  }
                }
              ],
              "_postman_id": "ec0b2477-ece0-4ab4-b46c-2aa79f458345",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "02991c60-b990-4dab-b472-16dfbc634fd0"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "5339a552-7d5b-4e20-ab84-22644ab451e9"
                  }
                }
              ],
              "_postman_id": "fc817811-dfdc-4237-9af2-d3e6bab3f39e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2542d741-0784-4e69-92c2-4f45652728a2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "927df0b5-4c9d-47d5-a8ff-877bca6fea5d"
                  }
                }
              ],
              "_postman_id": "90a7e626-ab0f-4ec7-b502-7832cc33b71d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    pm.collectionVariables.set(\"paymentToken\",jsonData.paymentToken); \r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7b942bb0-ff70-421d-9aea-e67f640a318c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "985c3e30-e119-4d71-a4b3-62f673edc597"
                  }
                }
              ],
              "_postman_id": "1b460027-2721-46f2-8eb0-390424854373",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e13023bf-1caa-4a6c-9347-f3d129eda200"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "605f0ef7-b404-4541-a6b7-f1427c4b674b"
                  }
                }
              ],
              "_postman_id": "b4b00714-51e1-4d0a-9999-51ef106ac0ad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b53f1f9a-e64e-400f-8046-eab53454d528"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b8e74e0f-8f14-46a3-9786-ae7c48a6f9e0"
                  }
                }
              ],
              "_postman_id": "cc999d91-293b-45f1-8ea6-725fea6255be",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ffc613b5-551c-43ce-b4b3-f88c509464ae"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "c1efa91d-e888-4b2d-8de8-cb71f46ca7b3"
                  }
                }
              ],
              "_postman_id": "8e6963ba-e555-4a37-8fe5-3c957e37f7e1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate Card-Before Payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ae995972-7499-4b4e-aa0f-a9106c0e06dd"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "17759321-8c84-4e61-82ee-1c1fec389901"
                  }
                }
              ],
              "_postman_id": "e9abb89d-c596-4139-8f51-ff371d82b708",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);  \r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "    var oldpaymenttoken=pm.collectionVariables.get(\"paymentToken\");\r",
                      "pm.expect(jsonData.paymentToken).to.not.eql(oldpaymenttoken);\r",
                      "pm.collectionVariables.set(\"paymentToken\",jsonData.paymentToken);\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      " \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3dc2f762-82c5-40ce-9465-259f42852486"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "39bd7ef5-c19b-4e36-abb2-472f6eb455a5"
                  }
                }
              ],
              "_postman_id": "52843711-a9bd-4b7a-8c51-257d712f90a1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate card-After payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6a9571e0-a17d-41db-bda8-c742aa93836d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "b1016c02-a4bf-4e5d-b951-c14ed9ea61f1"
                  }
                }
              ],
              "_postman_id": "cce21fa4-d931-4991-a565-ee5b337758b1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment-To check CVV deleted",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "229d3d01-720d-407e-a56a-00d6c8b2edab"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f9eba252-2fd4-416a-b840-41248a7bf248"
                  }
                }
              ],
              "_postman_id": "3b2a0d6e-9989-43bd-9ecd-d13d5301bdd8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "0f504e23-3572-46e8-93c7-97d88b025202",
          "_postman_isSubFolder": true
        },
        {
          "name": "Create Payment Agreement - New Card With immediate charge",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "36eb6910-daaf-42df-97d5-423db85df086"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "dbbf595f-4c15-488f-b572-aa123208b8cd"
                  }
                }
              ],
              "_postman_id": "0d819622-3f71-40e1-801d-ecc89ca2164b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "026a1a77-bb1a-4e6d-bc6c-c427f20a5418"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "722f17b8-d6ae-480c-8966-8158fa194e48"
                  }
                }
              ],
              "_postman_id": "76563006-07e6-4d71-a6da-c46694a1d1bd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bd2dc61f-9d13-4018-8953-638702aa1cfd"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fb34bb13-79d5-4ef9-8879-e9075eb85849"
                  }
                }
              ],
              "_postman_id": "1c9ee8c2-2243-42a5-be0f-b5620f5f5353",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      " pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "09151e22-fd3c-427b-b529-2c42c7af4de0"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f4d1353a-72ca-4a09-b10f-1f3fe700665f"
                  }
                }
              ],
              "_postman_id": "db5b0776-6dd2-44b7-9c65-ce194a66439d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement with Immediate Charge is Successful\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);  \r",
                      "    pm.collectionVariables.set(\"PurchaseTransactionRef\",jsonData.transactionReceipt);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "924a5f3e-41e0-434f-8ec0-85cb66fda11b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f64e83d9-e906-4158-b8cd-b7333f46ebcc"
                  }
                }
              ],
              "_postman_id": "49dd4964-a949-4a72-a3d8-f261f0f551ec",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"true\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      " pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      " pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 1\");\r",
                      "pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a219d6ac-33cc-4026-b054-bf5e3b6e7387"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "ed22f250-9244-4e60-9d18-cc3558028d76"
                  }
                }
              ],
              "_postman_id": "09d6621d-a256-410b-9918-a74810374e02",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    Refund();\r",
                      "   });\r",
                      "} else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund(){\r",
                      " try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw(e);\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "72fe9560-6184-4306-aef5-f46a49d0920c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "1ee631a0-6bec-4469-b180-ad39adfd348f"
                  }
                }
              ],
              "_postman_id": "b87cfcaa-1d45-481d-b883-f3d55be55d56",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text",
                    "disabled": true
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{clientReference}}\",\r\n  \"orderNumber\": \"{{orderNumber}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{PurchaseTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "dff3503b-2587-4ab0-844c-967554254312"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const purchaseReferenceNumber =pm.collectionVariables.get(\"PurchaseTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(purchaseReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Verify Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    verifySchema();\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].CardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "eeda5db6-efe6-4a4c-8ff4-f799578eaa2e"
                  }
                }
              ],
              "_postman_id": "626cbf9d-0b52-4ec8-a2cd-926e6148117b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "72784d96-3690-4dfd-a6cd-05541a929cd2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d6c76c1d-31e1-487b-b0c1-9a7ec00a4b3b"
                  }
                }
              ],
              "_postman_id": "f52ef41b-c428-4b2d-9287-638b388af437",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "c4e39ba5-b8a8-43ce-89be-90812ea6f300",
          "_postman_isSubFolder": true
        },
        {
          "name": "Create Payment Agreement - Duplicate card With immediate payment",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify IDM Login statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ced30716-e6f0-4a64-b778-3977dd0a6a13"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "230acc05-c6a4-4bea-9eac-7487ddc216ba"
                  }
                }
              ],
              "_postman_id": "22de77ec-f6bd-45b1-8787-2723d4b263cc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "66a7ccd7-8f01-40cb-922f-5e2fcf525dec"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "638141c4-bab9-47cf-9c72-473e77bb8106"
                  }
                }
              ],
              "_postman_id": "419377ff-f345-40d3-963d-4491ac0c05cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6f2c714b-7cfa-4c2d-a5e2-e1efeb72009d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "8948e9cc-8f71-428f-a502-7e32ba3d03ce"
                  }
                }
              ],
              "_postman_id": "a31cd7c2-d3d2-41c6-a7f6-3ddfcd36c521",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      " pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4c3429e2-7db8-417e-94dc-19f7efddfb9e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "238aca3f-cf0a-4a0a-b3f2-bbeb634cc2bf"
                  }
                }
              ],
              "_postman_id": "d3be9c53-8308-4857-aec4-d2b300786473",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cadfff03-660e-4800-bfbe-8dea9773a56d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d2be817d-05e9-4824-8189-dbcaa0a191c9"
                  }
                }
              ],
              "_postman_id": "ee5c7b22-b3f2-4ed3-9268-acd57025ca5f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"true\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "Init Card Capture -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "776e2695-5eca-4b4e-9465-b44bfc84cde7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2957d86c-9b38-477a-89f4-f320c45cf811"
                  }
                }
              ],
              "_postman_id": "45275b4b-f605-4f36-8c08-d301977b9a66",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "92bf60e9-4d0a-49a5-92cd-0dd5832e5850"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "251f2dc4-8ac3-46e6-8442-5707825a4e23"
                  }
                }
              ],
              "_postman_id": "8be93291-1530-4e32-9c19-0e6c42c79b5c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate Card-Before PA",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a271ed02-1578-4bde-86d8-aaf5820507ed"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "34d4e1d1-f607-4b1b-ba2b-15bd075edd9d"
                  }
                }
              ],
              "_postman_id": "11489c7f-118c-4664-baf1-0492d787fcdc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    var oldpaymenttoken=pm.environment.get(\"paymentToken\");\r",
                      "pm.expect(jsonData.paymentToken).to.not.eql(oldpaymenttoken);\r",
                      "pm.collectionVariables.set(\"paymentToken\",jsonData.paymentToken);\r",
                      "pm.collectionVariables.set(\"bin\", jsonData.extendedTransactionData[0].value);\r",
                      "    pm.collectionVariables.set(\"PurchaseTransactionRef\",jsonData.transactionReceipt);\r",
                      "\r",
                      "\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "821da083-1a9a-4476-970a-2a85bc117286"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8d4d6723-35a3-4266-9cab-dcbfb6d98ddc"
                  }
                }
              ],
              "_postman_id": "995e90c0-6ec7-42b0-b08b-db9c091e5150",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"true\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate card-After payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 1\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "32cc9f00-e140-42fd-886f-0d6ed965697d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "fd8faa7e-3e1e-4c33-b19d-f6342ab3f0cb"
                  }
                }
              ],
              "_postman_id": "040830b4-c6e7-444b-a0fb-743c280fc723",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "92c71b09-d81f-4f3a-877b-4433551a8e47"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const purchaseReferenceNumber =pm.collectionVariables.get(\"PurchaseTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " console.log(transactionReference);\r",
                      " if(purchaseReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].CardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2d057933-26b4-400f-a425-a358681f1dd3"
                  }
                }
              ],
              "_postman_id": "9b433371-1a14-426b-981f-4d3e69fa5fa2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c033437d-a64d-416e-b3a8-0a0935011997"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "325f5b90-5943-4e21-a991-d0d1aa76d0d1"
                  }
                }
              ],
              "_postman_id": "a73d78a4-5d91-42df-8f07-6abfe98e77f3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "1d25a396-e823-4318-8e2c-157d7b493e14",
          "_postman_isSubFolder": true
        },
        {
          "name": "Update Payment Agreement - Funding instrument update(UNVERIFIED Card)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "dea02f8c-0e7c-472b-b10b-1fd2ec21f71a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d2ff58ef-2431-4705-a754-b5dab26d0df4"
                  }
                }
              ],
              "_postman_id": "20c4a235-b3db-4526-8ebd-75a1e59146ed",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7eba4acc-da95-4f2c-89f6-118e18fd5509"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "df1e4fbb-cbd1-44e5-ab99-8b7348af2aa3"
                  }
                }
              ],
              "_postman_id": "5557e88a-a304-4d91-aa3f-df4ffec2456a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "52bedfc4-4365-4623-b97d-94b77a7fa738"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4eb078f7-c834-46ea-832c-6b92d3f736e0"
                  }
                }
              ],
              "_postman_id": "15ab1b53-a3fe-4161-85e2-eb32b2693f58",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c5611aea-b749-4297-ab86-bfa136eeb655"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "aebccb86-6eed-4ab2-ac46-1090d8a1fee6"
                  }
                }
              ],
              "_postman_id": "0a54766f-a37c-496d-ad94-e66a83e1679a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b31ef96b-2506-45c6-899c-8e1f52bc301f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7ae5de36-400e-4fba-83b0-47ab9241a99e"
                  }
                }
              ],
              "_postman_id": "648e72a1-e4a7-4c88-8b25-3c3cbc972e44",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.collectionVariables.set(\"agreementToken\", jsonData.paymentAgreements[0].paymentToken);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1c5a3840-41fd-4f1a-a6ef-07d6dc2864c2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "8b7ee630-0f11-48bb-bcd2-97d5e7c40775"
                  }
                }
              ],
              "_postman_id": "45f08b61-b2cf-4a77-8705-936493bbf69b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "21dc67ef-2b5c-4b93-8405-f40f5f679c38"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "161e7f88-5b16-4940-984d-307f18adda18"
                  }
                }
              ],
              "_postman_id": "a27c294d-6476-4d58-9250-84ac2be2a2ff",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Credit Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try {  \r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.paymentInstrument.itemId);\r",
                      "pm.collectionVariables.set(\"CardSuffix\",jsonData.paymentInstrument.suffix);\r",
                      "} \r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b74e0d69-1f6c-450d-a859-5613a71a115d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0d6cb55f-a133-44c1-85ad-e1213548ccb0"
                  }
                }
              ],
              "_postman_id": "710938b2-1b25-4147-84c8-c51258f23062",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card1}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "Update Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Update Payment Agreement is successful\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.expect(jsonData.paymentAgreement.cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a97ccb75-0bc1-41f7-91ab-f3a1c2332d7b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e0e89228-4346-4940-82c0-596a2f266fd0"
                  }
                }
              ],
              "_postman_id": "5a668de6-f93c-43ef-be83-74488a2b7b59",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t\"firstName\": \"Francois\",\r\n\t\t\"lastName\": \"test\",\r\n\t\t\"email\": null,\r\n\t\t\"company\": null,\r\n\t\t\"extendedAddress\":\"test\",\r\n\t\t\"streetAddress\": \"sydney\",\r\n\t\t\"suburb\":\"2150\",\r\n\t\t\"stateOrTerritory\":\"Sydney\",\r\n\t\t\"postalCode\": \"2145\",\r\n\t\t\"countryCode\": \"5169\"\r\n\t},\r\n\t\"paymentAgreement\": {\r\n\t\t\"type\": \"RECURRING\",\r\n\t\t\"chargeFrequency\": \"MONTHLY\",\r\n\t\t\"chargeAmount\": 56.00,\r\n\t\t\"paymentInstrumentId\": \"{{itemID}}\"\r\n\t},\r\n\t\"fraudPayload\":\t{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/{{agreementToken}}"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is update in the wallet \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "\r",
                      "}\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "39bab270-e41b-4738-8c57-91d01fd24b81"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "2e4db113-a90f-4b4b-a4e0-4f51854ef253"
                  }
                }
              ],
              "_postman_id": "07c15bb2-b92f-4188-9084-939b486c3c62",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "701e48e5-beed-4a17-b815-3b0c282b91f9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d3091b07-bfa0-401b-980a-d3954ee11657"
                  }
                }
              ],
              "_postman_id": "46b63e58-c92d-4ba7-a1a1-18da60bdc3b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "a6bcb048-6d57-49cc-8f02-3c20087d45f6",
          "_postman_isSubFolder": true
        },
        {
          "name": "Update Payment Agreement - Funding instrument update(VERIFIED Card)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ec574d80-e889-47f7-9843-f960ba943ac5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8f6b027c-8b53-4f76-b007-83e1c51b22cd"
                  }
                }
              ],
              "_postman_id": "81f0892b-1908-4af2-853b-528a036507ef",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7088a5fa-3296-4bc6-8ba8-5a7bf9740c2f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6a1e7d6e-9aa6-4d2b-b038-8a17dd4408b4"
                  }
                }
              ],
              "_postman_id": "4ff64cb5-f099-4a23-a2e0-84b576b24f46",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cbec97e3-541e-46c8-9c88-bd47b77b3a90"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3884e246-26b0-468a-94be-bdfeba4d152d"
                  }
                }
              ],
              "_postman_id": "b4a14b3c-12ac-4012-9d6c-59f86d06a037",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c7344018-1cc2-4b65-96b1-cff8fc741d82"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "b8c4ad30-6cc1-4a89-b1f0-11cdbb1ecf54"
                  }
                }
              ],
              "_postman_id": "b039b332-d185-40bc-bfce-8499405e3060",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "40d783a4-5914-4c81-a092-907efa831621"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6d9d21a4-ef5d-4cea-8b6c-c5ff92107de0"
                  }
                }
              ],
              "_postman_id": "21096294-5647-48c6-8722-f243c5892901",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "     try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"agreementToken\", jsonData.paymentAgreements[0].paymentToken);\r",
                      "\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "6758b08c-f4e2-4bde-b4c3-71b8873ca0db"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "4b6ceb38-fef0-449c-9649-15afd819271b"
                  }
                }
              ],
              "_postman_id": "d526647c-ea94-4031-b452-96ea09cd8e4a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8fa69d88-080b-4d1d-8edf-f3fcd7fc380a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "624af427-ef00-4ac9-af98-4dda511d4405"
                  }
                }
              ],
              "_postman_id": "271f07fc-80e3-434f-8234-47f747c0c5ea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Credit Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.paymentInstrument.itemId);\r",
                      "pm.collectionVariables.set(\"CardSuffix\",jsonData.paymentInstrument.suffix);\r",
                      "} \r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f286d49a-b66e-4460-967f-88242d18cd40"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6b19b7cd-7a01-4c59-a39c-d6f4d29c9547"
                  }
                }
              ],
              "_postman_id": "38a7bb6c-916e-462b-90af-15fa035f1219",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card1}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8f211cd8-ec58-49d2-8e24-3e8767c5713d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f05dd053-83fe-4bd0-8ce7-4a82273ba7da"
                  }
                }
              ],
              "_postman_id": "af05eb81-6eab-4839-b531-1a7ce8b56010",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "CVVandExpiryTokenization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ed6fda31-b636-4a03-bcb0-8000db5bf4ec"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "27f331eb-1d06-4e3b-8ad8-7e120c1efbd9"
                  }
                }
              ],
              "_postman_id": "9cfd8975-fb6b-4638-bb62-bfc82078a5d1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": {{itemID}},\r\n  \"scheme\": \"MASTERCARD\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "Update Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Update Payment Agreement is successful\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.expect(jsonData.paymentAgreement.cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "da6ba465-00c1-4c09-92a5-21384b080231"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2dfe6a1a-6f7e-4c14-9cbe-e0650f45f224"
                  }
                }
              ],
              "_postman_id": "e5d56584-dd96-4702-baf9-eb2ff35851e4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t\"firstName\": \"Francois\",\r\n\t\t\"lastName\": \"test\",\r\n\t\t\"email\": null,\r\n\t\t\"company\": null,\r\n\t\t\"extendedAddress\":\"test\",\r\n\t\t\"streetAddress\": \"sydney\",\r\n\t\t\"suburb\":\"2150\",\r\n\t\t\"stateOrTerritory\":\"Sydney\",\r\n\t\t\"postalCode\": \"2145\",\r\n\t\t\"countryCode\": \"5169\"\r\n\t},\r\n\t\"paymentAgreement\": {\r\n\t\t\"type\": \"RECURRING\",\r\n\t\t\"chargeFrequency\": \"MONTHLY\",\r\n\t\t\"chargeAmount\": 56.00,\r\n\t\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n         \"stepUpToken\":\"{{stepUpToken}}\"\r\n\t},\r\n\t\"fraudPayload\":\t{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/{{agreementToken}}"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is update in the wallet \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "\r",
                      "}\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f32aa07c-e6c5-4e26-9baf-e7a6e4d5125c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "43cc415b-97a2-47bf-a5e2-f83d545f25ea"
                  }
                }
              ],
              "_postman_id": "d9916553-9bab-41f8-8991-46168bfc689c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "21831974-a616-4130-8ed4-e0c1d3224d57"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "996ed727-1b9c-4c45-b9fd-469711b6a5ad"
                  }
                }
              ],
              "_postman_id": "600ec20c-763a-44ae-a858-7432e99a4b7f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "1ea9308c-8ee6-4dea-a0ae-97ee053c0cd7",
          "_postman_isSubFolder": true
        },
        {
          "name": "Charge Payment Agreement",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7ea7047e-daf7-4745-983f-4b4dd6c6997c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0db71682-1854-4590-8304-b918c39521a9"
                  }
                }
              ],
              "_postman_id": "8cef1e82-fda0-4d54-9cc8-87d9cdaa2d9b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d7308290-3bf9-43a7-b96c-490e1b05ee24"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d60a9508-eb00-4ab3-ab65-8e93561fc3c8"
                  }
                }
              ],
              "_postman_id": "abd726a9-d50b-4d5f-9f5a-e64eb0c6c506",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8f4d3394-2983-49e5-9db0-5b9eed8d04bc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "99aa4128-065c-4608-9ad1-470a67649faf"
                  }
                }
              ],
              "_postman_id": "6766053b-0a2a-49ee-a435-edd740eabc5e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "01d447a5-a7aa-46f9-8181-9c3eb28a859d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "6e7260cc-85d3-44fc-ba50-1b8062a3be02"
                  }
                }
              ],
              "_postman_id": "9df1f7fd-67f4-49b5-b9c0-6eee897e1b1a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "376753af-0351-4d0f-b6d1-f91651b56355"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5eaddaed-7dba-4fb8-aab9-9282de53ed62"
                  }
                }
              ],
              "_postman_id": "ac53fbc1-d178-4515-91fd-b222fb5ab8af",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"paymentToken\",jsonData.paymentAgreements[0].paymentToken);}\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2412c680-72fb-43cc-b655-33c79974044b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "91c78df5-75b6-4991-bb9f-6a085c68adf7"
                  }
                }
              ],
              "_postman_id": "0c762fb3-91e3-4756-aa91-1bef5610dc69",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Charge Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement with Saved Card is successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"PurchaseTransactionRef\",jsonData.transactionReceipt);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fe12595e-0762-4d9f-ab28-c3120c50e6de"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1baef534-dcb3-4d79-b645-0b4fd9e08925"
                  }
                }
              ],
              "_postman_id": "ad7cb17e-efb4-4f2b-857c-684f00ce99a4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"transactionType\": {\r\n\"creditCard\": \"PURCHASE\"\r\n},\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\"paymentToken\": \"{{paymentToken}}\",\r\n\"amount\": {{Amount}},\r\n\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/charge"
              },
              "response": []
            },
            {
              "name": "Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    Refund();\r",
                      "   \r",
                      "   });\r",
                      "} else{\r",
                      " \r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund(){\r",
                      " try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw(e);\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "571522f1-fbe4-4019-ae04-14220c248336"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2f566699-1a88-49ed-adb8-f5c743756498"
                  }
                }
              ],
              "_postman_id": "6255b5b6-8547-41fa-be2b-2afcd28deca7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{PurchaseTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "48daa989-1c12-43d7-8020-3c1836edd529"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const purchaseReferenceNumber =pm.collectionVariables.get(\"PurchaseTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(purchaseReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Verify Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    verifySchema();\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].CardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      " pm.collectionVariables.clear();\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e24f16e1-fcb2-4bb1-aa37-93303d8da61d"
                  }
                }
              ],
              "_postman_id": "0947e818-aa57-41d0-9bb5-fdda98e06645",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "2a8090f4-e374-4b3a-aa0e-3dd26658fb47",
          "_postman_isSubFolder": true
        },
        {
          "name": "Delete Payment Agreement",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c1c9a74b-b502-40d5-872c-955c254dfc2d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8ddae6d3-740e-4377-b5cd-e9d0147d7147"
                  }
                }
              ],
              "_postman_id": "bedf47ad-5fd1-4337-91c9-49f96b9c01b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "677fcdff-61c6-4dac-bdd1-3a267dba3f54"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2aa84ad0-a614-4f5d-8eed-4aa8e61f63de"
                  }
                }
              ],
              "_postman_id": "75525aa2-3bde-4ecd-9727-492bc2a7a583",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f8cdeac7-603c-4a27-9e4e-3db09e07a25c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a008a8bf-6fb0-4ffb-b977-75dfb17ec5ea"
                  }
                }
              ],
              "_postman_id": "fe00196b-b4a8-492a-bf38-88453455a485",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "976a56ef-9f75-46a9-bbfa-9b2fb7585f05"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f8184c57-b163-44e9-a4cb-91bc140208f3"
                  }
                }
              ],
              "_postman_id": "34ca065e-510a-4be2-811b-d1f86f7b14c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6ac8fda0-1fd1-45a1-b19b-252fa77e4b21"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "27544f09-5183-45bd-b114-59cafc6849d8"
                  }
                }
              ],
              "_postman_id": "428ae09a-f28e-4221-998f-bdb28046623d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is deleted from the wallet\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"agreementToken\",jsonData.paymentAgreements[0].paymentToken);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ad594db1-a9e7-4ea5-abdd-1b141f70b3c6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "119b18a6-90e5-440b-a6b5-a0b74626cb30"
                  }
                }
              ],
              "_postman_id": "9f8c2276-0754-4610-acbc-b9227efe4aec",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete the Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Delete Payment Agreement is successful\", function () {\r",
                      "try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e5b8b0df-a02a-4467-8aa0-c9c490be77d5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "be3e2dc0-3dfe-403b-b582-ff86714985dc"
                  }
                }
              ],
              "_postman_id": "a1b19945-7709-46a7-8227-10ab1e26c060",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/{{agreementToken}}"
              },
              "response": []
            },
            {
              "name": "List Instrument - Delete Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is deleted from the wallet\", function () {\r",
                      "   try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.expect(jsonData.paymentAgreements.length).to.eql(0);\r",
                      "pm.expect(jsonData.creditCards.length).to.eql(1);\r",
                      "pm.collectionVariables.clear();\r",
                      "} catch(e) {\r",
                      "    pm.collectionVariables.clear();\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0488d22b-5fc8-46d7-9189-aeeb6811bcdf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "faa457e5-0682-4d21-8cf0-ce1bd3ea8261"
                  }
                }
              ],
              "_postman_id": "51981a61-f506-4103-af02-49744e114c2e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "_postman_id": "f0260ddf-6736-42e0-8407-a87bedae218a",
          "_postman_isSubFolder": true
        },
        {
          "name": "Preauth Verify And Fraud Check",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "291da33f-7f13-4311-bd6a-790c8bdc37a3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7af0d164-0f29-4a3b-a383-9dcd1357b380"
                  }
                }
              ],
              "_postman_id": "b63efa02-9bc4-4926-9bcb-3481e0055799",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "300e1325-c917-4ae6-8996-045449cc9f79"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e35faed8-137c-4d4d-9b9c-8e5af0be0fd6"
                  }
                }
              ],
              "_postman_id": "c95d85a6-9815-41d3-bcb3-f82461d58079",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      " pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "        pm.collectionVariables.set(\"CardSuffix\",jsonData.paymentInstrument.suffix);\r",
                      "\r",
                      "        }\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "28d17a8b-9014-42b5-a57a-a1302aaee4f7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8ca4b5ed-e9c6-4dea-9206-fa661d044c17"
                  }
                }
              ],
              "_postman_id": "fb7c03f0-9f4c-4817-bf35-c2b94243b03a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b7c5c346-223b-4502-bbb1-66d033815cda"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "      let messageString = pm.response.json().creditCards[0].stepUp.url;\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "      pm.collectionVariables.set(\"sessionID\", messageString.split('/')[6]);\r",
                      "  pm.collectionVariables.set(\"paymentToken\", jsonData.creditCards[0].paymentToken);\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "70fee0a0-5a48-433f-942e-c2e2481d19d9"
                  }
                }
              ],
              "_postman_id": "8b15ec06-d3a1-4b8f-92aa-2e277493ed3c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "CVVandExpiyTokenization",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f3bb613e-6a70-4640-955e-ba2fa74b0bd7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "    }catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4e6854ef-2d87-4f75-93e6-b94f4b813ba7"
                  }
                }
              ],
              "_postman_id": "20dc9c89-1562-4323-882b-ac739c176366",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": {{itemID}},\r\n  \"scheme\": \"VISA\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "VerifyandFraud",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d95acedf-f3b7-4257-8085-16fac2c4aeca"
                  }
                }
              ],
              "_postman_id": "7ccd7b10-8327-427d-8d36-2ff4078df1df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-api-key",
                    "value": "{{WOWOL-APIKEY}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"clientReference\": \"TestReference{{$randomInt}}\",\r\n\"paymentInstruments\": [\r\n{\r\n\"paymentToken\": \"{{paymentToken}}\",\r\n\"stepUpToken\":\"{{stepUpToken}}\"\r\n    \r\n}\r\n],\r\n\"fraudPayload\": {   \r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>woolworths_online</merchantID>\\r\\n  <merchantReferenceCode>1234-26I1</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/instruments/verify?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "instruments",
                    "verify"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GetStepUpToken",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "328c6f22-ea46-44bf-968f-9656d9105885"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "    }catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cac53489-fc16-400e-a619-54de8597ab8d"
                  }
                }
              ],
              "_postman_id": "d9ad195c-f8eb-44d6-b771-47d2c99e0ffb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": {{itemID}},\r\n  \"scheme\": \"VISA\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "09393660-127c-48c5-b2ab-66fd1c67da69"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "            \r",
                      "    } catch(e) {\r",
                      "               \r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d9e95f5b-4ca5-43dd-b81f-73640f7ef87f"
                  }
                }
              ],
              "_postman_id": "f0f95c89-8343-49b7-856b-3fafc6777fc0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n\"transactionType\": {\r\n    \"creditCard\": \"PREAUTH\", \r\n    \"giftCard\": \"PURCHASE\", \r\n    \"payPal\": \"PURCHASE\" ,\r\n    \"debitCard\": \"PURCHASE\",   \r\n    \"googlePay\": {   \r\n      \"creditCard\": \"PREAUTH\",   \r\n      \"debitCard\": \"PURCHASE\"\r\n    },\r\n    \"applePay\": {    \r\n      \"creditCard\": \"PREAUTH\",  \r\n      \"debitCard\": \"PURCHASE\"\r\n    }\r\n  },\r\n  \"clientReference\": \"{{clientReference}}\",\r\n  \"orderNumber\": \"{{orderNumber}}\",\r\n  \"shippingAddress\": {\r\n    \"firstName\": \"Francois\",\r\n    \"lastName\": \"van der Merwe\",\r\n    \"company\": \"Private\",\r\n    \"extendedAddress\": \"Unit 1\",\r\n    \"streetAddress\": \"22 River Oak Circuit\",\r\n    \"suburb\": \"Kellyville\",\r\n    \"stateOrTerritory\": \"NSW\",\r\n    \"postalCode\": \"2155\",\r\n    \"countryCode\": \"AU\"\r\n  },\r\n  \"payments\": [\r\n    {\r\n   \"paymentInstrumentId\": \"{{itemID}}\",\r\n  \"amount\":21.00,\r\n  \"stepUpToken\": \"{{stepUpToken}}\"\r\n    }\r\n      \r\n  ],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "1a58fe4b-4f19-410f-a94b-d54459801c3e",
          "_postman_isSubFolder": true
        },
        {
          "name": "Check out flow-Split Payment with Saved CC+GC",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "65deaa6b-e0f3-43e6-849a-0c81cb17c0b5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "eae3b4b0-5cd9-4ccb-8426-16d6bee959c5"
                  }
                }
              ],
              "_postman_id": "30b79899-9995-40c5-b316-936d6de56399",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f4065724-591e-46cb-8c22-e63ea8e2de7f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3adbd549-0624-432a-b7ec-086ab61852ae"
                  }
                }
              ],
              "_postman_id": "b9bdee77-7f42-4a7e-b3eb-5acab050b97f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "cards",
                    "initcapture"
                  ],
                  "query": [
                    {
                      "key": "Authorization",
                      "value": "Bearer {{accessToken}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1a1ee704-6291-4332-975c-1673663394e6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "87389734-220d-49f4-b299-332bbbb55040"
                  }
                }
              ],
              "_postman_id": "90b82345-a0b7-4eb0-b179-3e08c5dd2004",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "Tokenize GiftCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify GiftCard Tokenization statusCode is 200\", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5ad2bb9e-8451-4294-883d-47f476da5453"
                  }
                }
              ],
              "_postman_id": "9d62fe45-b94f-4502-a118-bbc85c2a2576",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"cardNumber\":\"{{GiftCardNumber}}\",\r\n\"pinCode\": \"{{GiftCardPINCode}}\",\r\n\"primary\": true,\r\n\"save\": true\r\n}\r\n\r\n\r\n\t",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/giftcards/tokenize?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "giftcards",
                    "tokenize"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCarditemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "        pm.collectionVariables.set(\"giftCarditemID\",jsonData.giftCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the GiftCard Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the GiftCard Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b64fca61-cb8b-494f-9bb1-db35f9e75f5f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "a6b14b91-1fca-4f72-a48b-2d6876c67b17"
                  }
                }
              ],
              "_postman_id": "5af6c46b-7fb2-4de5-a6aa-b87e2c95c139",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment with CreditCard and GiftCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      " const statusCode= pm.response.code;\r",
                      "\r",
                      "  pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify Split Payment with CreditCard and GiftCard is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - CVV Deleted\");\r",
                      "}\r",
                      "\r",
                      "function payments(){\r",
                      "    try{\r",
                      "    pm.collectionVariables.set(\"CreditCardTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"GiftCardTransactionRef\", jsonData.giftCards[0].paymentTransactionRef); \r",
                      "    pm.collectionVariables.set(\"creditCardSuffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"giftCardSuffix\", jsonData.giftCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.partialSuccess).equals(false);\r",
                      "    pm.expect(jsonData.giftCards[0].externalServiceMessage).to.eql(\"ACCEPTED\");\r",
                      "    pm.expect(jsonData.giftCards[0].externalServiceCode).to.eql(\"00\");\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "  }\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "eb24ecce-3c56-4672-b6d0-cceb9021f1da"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4cc71378-f2ec-4911-9154-f137162ecb85"
                  }
                }
              ],
              "_postman_id": "da6127b6-9f78-4183-953c-258dcd35bcae",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionType\": {\r\n    \"creditCard\": \"PURCHASE\",\r\n    \"giftCard\": \"PURCHASE\",\r\n    \"payPal\": \"PURCHASE\",\r\n    \"androidPay\": {\r\n      \"creditCard\": \"PREAUTH\",\r\n      \"debitCard\": \"PURCHASE\"\r\n    },\r\n    \"applePay\": {\r\n      \"creditCard\": \"PREAUTH\",\r\n      \"debitCard\": \"PURCHASE\"\r\n    }\r\n  },\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"shippingAddress\": {\r\n    \"firstName\": \"Francois\",\r\n    \"lastName\": \"van der Merwe\",\r\n    \"company\": \"Private\",\r\n    \"extendedAddress\": \"Unit 1\",\r\n    \"streetAddress\": \"22 River Oak Circuit\",\r\n    \"suburb\": \"Kellyville\",\r\n    \"stateOrTerritory\": \"NSW\",\r\n    \"postalCode\": \"2155\",\r\n    \"countryCode\": \"AU\"\r\n  },\r\n  \"payments\": [\r\n    {\r\n      \"paymentInstrumentId\": \"{{creditCarditemID}}\",\r\n      \"amount\": {{Amount}}\r\n    },\r\n    {\r\n      \"paymentInstrumentId\": \"{{giftCarditemID}}\",\r\n      \"amount\": {{GiftCardAmount}}\r\n    }\r\n  ],\r\n  \"extendedMerchantData\": [\r\n    {\r\n      \"field\": \"correlationId\",\r\n      \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n    }\r\n  ],\r\n  \"fraudPayload\": {\r\n    \"provider\": \"cybersource\",\r\n    \"version\": \"CyberSourceTransaction_1.101\",\r\n    \"format\": \"XML\",\r\n    \"responseFormat\": \"XML\",\r\n    \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Refund for CreditCard and GiftCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      "  pm.test(\"Verify Refund status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "  if(statusCode==200){\r",
                      "    pm.test(\"Verify Refund Transaction is successful \", ()=> {\r",
                      "    refund();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - CVV Deleted\");\r",
                      "}\r",
                      " function refund(){\r",
                      "      try{\r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.set(\"creditCardRefundRef\",jsonData.refundResponses[0].refundTransactionRef);\r",
                      "        pm.collectionVariables.set(\"giftCardRefundRef\",jsonData.refundResponses[1].refundTransactionRef);\r",
                      "        pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "        pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"00\",\"100\"]);\r",
                      "        pm.expect(jsonData.refundResponses[1].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "        pm.expect(jsonData.refundResponses[1].externalServiceCode).to.be.oneOf([\"00\",\"100\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      " }\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8cd4fd2c-3e2e-4c03-a5f5-9f06c36b14af"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5dd54ac0-6839-417f-8756-a1dd9c439dc7"
                  }
                }
              ],
              "_postman_id": "ac5c3949-1862-4638-99d8-28be76fb4510",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{CreditCardTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    },\r\n    {\r\n       \"paymentTransactionRef\": \"{{GiftCardTransactionRef}}\",\r\n      \"amount\":{{GiftCardAmount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transction History",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const preauthReferenceNumber =pm.collectionVariables.get(\"CreditCardTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(preauthReferenceNumber === transactionReference){\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"CreditCardTransactionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "    pm.expect(pm.collectionVariables.get(\"creditCardRefundRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify GiftCard Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const completionReferenceNumber =pm.collectionVariables.get(\"GiftCardTransactionRef\"); \r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(completionReferenceNumber === transactionReference){\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"GiftCardTransactionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify GiftCard Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"giftCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "    pm.expect(pm.collectionVariables.get(\"giftCardRefundRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5b40f7cd-8e40-4888-b0cf-35c8a9758bec"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ba35cf22-d595-4226-aa60-5de625b229b7"
                  }
                }
              ],
              "_postman_id": "384777d1-e44c-4715-9e7a-fc96eaa2eb93",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment - CVV Deleted",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0db7b0cc-4b5f-4c0d-af11-2fb18ce86ac4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d1435817-abf5-47d0-ae62-460112337a16"
                  }
                }
              ],
              "_postman_id": "c0f7642d-416f-4635-8cb7-ee024f9326f9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{creditCarditemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "94fe189c-e125-4807-aa93-fc6fac1edd0b",
          "_postman_isSubFolder": true
        },
        {
          "name": "Check out flow - Split Payment (CC + PP)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify IDM Login statusCode is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7bd0a0d3-aa36-4c6a-9b27-380a646ed011"
                  }
                }
              ],
              "_postman_id": "14ea4ae7-74b2-4b23-9b53-318d1bed1d03",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{ShopperID}}\",\r\n    \"username\": \"savedcarduser\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "   if(jsonData.creditCards.length===1){\r",
                      "    pm.collectionVariables.set(\"creditCardItemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    postman.setNextRequest(\"Delete Instrument-creditCard\");\r",
                      "   }else{\r",
                      "       postman.setNextRequest(\"Init Card Capture Call\");\r",
                      "   }  \r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e; \r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "24a77fa4-8ef7-4f33-ba8b-73d5a3c09322"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f24f3562-d411-449f-a9b3-55ee9ccdc0a8"
                  }
                }
              ],
              "_postman_id": "c94214c7-ff1c-4cda-8914-78236cbea735",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete Instrument-creditCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e; \r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f9440ed1-42c8-4563-a0b0-ce5613dcc4af"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "8b772de3-1366-4beb-84e7-968878720a84"
                  }
                }
              ],
              "_postman_id": "9a417899-ecd6-4ab5-9853-1e5b07e37f0b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{creditCardItemID}}"
              },
              "response": []
            },
            {
              "name": "Init Card Capture Call",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b4598649-165b-42e2-824b-def2c92ce788"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5ed61063-e2c8-4584-a102-b7e9dfa83ea2"
                  }
                }
              ],
              "_postman_id": "60245312-5e59-43d4-80e3-13b4e142cef0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d23bb94e-0bbd-4852-91f3-8169a13f94d7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5be21599-d6ad-4907-b202-190d3838b832"
                  }
                }
              ],
              "_postman_id": "7d1ae867-d41a-42f1-994e-f3d0bfb5b46e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardItemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"payPalItemID\",jsonData.payPal[0].paymentInstrumentId)\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e; \r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a3fa29b1-2a01-4985-80c8-6b493b5f6307"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "e70c6a2d-df11-4dad-a312-dcb7c6a50cbe"
                  }
                }
              ],
              "_postman_id": "fa56716d-8615-47e2-892a-10f4d6f485c2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment with PayPal and CreditCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      "   pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      "    if(statusCode==200){\r",
                      "    pm.test(\"Verify Split Payment with CreditCard and PayPal is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function payments(){\r",
                      "try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"payPalTransactionRef\", jsonData.payPal[0].paymentTransactionRef); \r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.partialSuccess).equals(false);\r",
                      "    pm.expect(jsonData.payPal[0].externalServiceMessage).to.eql(\"ACCEPTED\");\r",
                      "    pm.expect(jsonData.payPal[0].externalServiceCode).to.eql(\"00\");\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      " }\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b9c3faad-91ca-41b7-9800-1d1c7d795b6e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9f2e7856-6fec-4e23-8bec-b6f4b84d8e6d"
                  }
                }
              ],
              "_postman_id": "256f91d9-b6e3-4e48-8e00-b68506f1391a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PURCHASE\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{creditCardItemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            },\r\n            {\r\n            \"paymentInstrumentId\": \"{{payPalItemID}}\",\r\n\t\t\t\"amount\":{{Amount}}   \r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Refund for PayPal and CreditCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      "pm.test(\"Verify Refund status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      "if(statusCode==200){\r",
                      "pm.test(\"Verify Refund Transaction is successful \", ()=> {\r",
                      " Refund();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund() {\r",
                      "try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"payPalRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[1].refundTransactionRef); \r",
                      "pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"00\"],[\"100\"]);\r",
                      "pm.expect(jsonData.refundResponses[1].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "pm.expect(jsonData.refundResponses[1].externalServiceCode).to.be.oneOf([\"00\",\"100\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0d0e1072-a8d9-4475-9bdd-b6665033de47"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3a9145f4-36be-446b-86fe-fa8e1132851a"
                  }
                }
              ],
              "_postman_id": "e4ba3ff8-c8e9-4f81-985a-8ad1f37ef318",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{payPalTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    },\r\n    {\r\n       \"paymentTransactionRef\": \"{{creditCardTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "6540778a-c4bd-4eca-b52c-719ea0cda598",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "501e3c03-3375-4ac0-889a-db77d70b39b2"
    }
  ],
  "variable": [
    {
      "id": "71ec2b60-227f-4a2d-aea3-cf3e0cd7f1a7",
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "id": "113b6f96-70f8-430c-b3e7-bfab767b18f5",
      "key": "creditCardItemID",
      "value": "",
      "type": "string"
    },
    {
      "id": "7f94f48e-932e-4ce5-afda-c60942fc3613",
      "key": "sessionID",
      "value": "",
      "type": "string"
    },
    {
      "id": "4c6f29b2-7b05-404a-8508-956be5f177ee",
      "key": "payPalItemID",
      "value": "",
      "type": "string"
    },
    {
      "id": "ed24d4c9-de89-42db-b304-f3af397fbb7c",
      "key": "creditCardTransactionRef",
      "value": "",
      "type": "string"
    },
    {
      "id": "8f8604e9-d5c9-42cf-8fdf-c661b17977c7",
      "key": "payPalTransactionRef",
      "value": "",
      "type": "string"
    },
    {
      "id": "14e48de7-dfa1-42fb-b6bf-a036d95d8881",
      "key": "suffix",
      "value": "",
      "type": "string"
    },
    {
      "id": "4a36336a-5979-49d3-94a9-65b7169c9164",
      "key": "bin",
      "value": "",
      "type": "string"
    },
    {
      "id": "b52d69a9-3d30-4639-84aa-0d54a66dbc00",
      "key": "payPalRefundRef",
      "value": "",
      "type": "string"
    },
    {
      "id": "ca0e4a55-d94c-4eaa-9048-628d84fa9637",
      "key": "creditCardRefundRef",
      "value": "",
      "type": "string"
    }
  ]
}