{
  "info": {
    "_postman_id": "8d706de5-b486-4686-86e4-e2e3e33d7dfa",
    "name": "SchemeToken TestCases-V2",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "WowOnline-SchemeToken-V2",
      "item": [
        {
          "name": "Add Card- My Account Page(Verify=False)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "34d9d13f-d41e-413b-a32e-51a0349afd29",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "9279afb6-f05d-42d8-baba-767e408f5405",
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      " \r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "ce4d48c4-cf87-4cbf-b89d-c114f74bda7a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e953e9e-5f11-42bc-ada2-85e9c3ee806e",
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "     try{\r",
                      "    pm.response.to.have.status(200);   \r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "id": "d33dda3e-5a98-423a-abb4-36204bbf9569",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7cb59445-8710-4d4c-bc71-74a62a85e896"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f73b40e0-e501-4f1c-a9d9-d188ce9d23a7"
                  }
                }
              ],
              "id": "294afd05-eb9d-49f5-bb4a-0f32f75b6e8b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize with Verify=False",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9a530171-d935-422c-b448-95bcad092e17"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3a02792d-ee82-4678-bd14-334ca1db2918"
                  }
                }
              ],
              "id": "6cd811a2-1e85-49b1-9acb-b7c909213461",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"26\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "13f6ea69-dfa0-427d-8985-dfaa0ded4bc2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "     try{\r",
                      "          pm.response.to.have.status(200);\r",
                      "          pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "// pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "            throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e44176cd-da74-4a5c-a28a-632b6f0775a6"
                  }
                }
              ],
              "id": "70964867-1800-4e67-b729-51063bf5190b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "id": "17dc2ee1-9caf-48b3-8a93-c1aa7c59e7f8"
        },
        {
          "name": "Add Card -My Account Page (Verify=True)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "80379d0a-3322-48c1-832a-77d4e9e190b4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b0f81e14-1482-498b-b746-1e56f875a437"
                  }
                }
              ],
              "id": "824661ec-de1b-402c-853e-c6a685a01252",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "        }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "afb2de80-6070-42d1-843a-2d37ed58b011"
                  }
                }
              ],
              "id": "a8992214-a200-40dd-af9e-36ddc0468376",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "83cf04f7-1eeb-43e4-8a80-e85c8023c08a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "92d77c65-a379-4ac9-a80e-e8e58020ec45"
                  }
                }
              ],
              "id": "d6aaa942-6b2b-41e6-ae76-f42854fab0cc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize with Verify=True",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "73a8c016-7c1a-4145-a6ee-00c171e4af3d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9aace8c9-79ab-4737-9fa7-26ec2ef694db"
                  }
                }
              ],
              "id": "aeaa93fb-72b4-4e15-9915-2a6f9366cf0f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [20000]);"
                    ],
                    "type": "text/javascript",
                    "id": "4b30f00f-bf3b-4ade-a8da-7d726387a305"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bc80aa16-9359-4220-9fac-28df181e545f"
                  }
                }
              ],
              "id": "f79f7d3c-6923-4886-ae0b-77f0ff760c0a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "id": "b692159f-4281-45f5-b6c8-1b5881dd481d"
        },
        {
          "name": "Add card - My Account Page (Duplicate Card with Verify=False)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7f4e25fc-5264-4ee4-90f8-fd17f17b8e06"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "917fb0ad-a5ad-4bc2-9e91-62513ad0ef00"
                  }
                }
              ],
              "id": "084deb8a-c8b7-4e57-a591-78782ba219fc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e7267efc-121b-4bd1-ac4f-43c8247f7f7a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c1bd5366-fb24-450f-940e-027957d4553f"
                  }
                }
              ],
              "id": "0a779af2-9671-4fec-b444-9790f5be43ee",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "563a7b5d-1e86-4069-8bac-20e84cff2e74"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "26df7628-58b7-4500-ac4e-f08ae353cde1"
                  }
                }
              ],
              "id": "0e25e829-766d-4146-ba3d-8a5a4869b079",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "63983144-663d-4cad-bf29-a0de1cab35fd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4271131e-ccbf-4419-b361-d998685b27ba"
                  }
                }
              ],
              "id": "7a563f05-89d4-4278-9766-723bb2862e6b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e17fec06-6cf3-41ae-aa46-35908cbce6e0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "02ae8a33-85c1-48af-8f6b-7396fddf46c1"
                  }
                }
              ],
              "id": "12508076-5fb8-47bb-a6ac-cff6143bf645",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8eb24d7e-b99f-4db2-bd80-f09df0cbe604"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3dcd3d3a-cadc-424e-858c-802f759f67c7"
                  }
                }
              ],
              "id": "7f3bbc13-d91e-4fc6-b205-f9b79bb9409c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "9ac65948-f8f8-4064-9380-ad27abf81722"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "   pm.collectionVariables.clear();\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    pm.collectionVariables.clear();\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6e77a91b-fe22-49ca-86f5-584dcecc2307"
                  }
                }
              ],
              "id": "798c4f08-69ff-4943-8b94-4f5dba5bb4dc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "id": "b006e5d5-07a7-49a2-97a6-6109d05b8f45"
        },
        {
          "name": "Add card - My Account Page (Duplicate Card with different expiry)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7be653d6-b9b7-49ad-92b6-055de8015ae6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "dfb5b962-c271-4eba-ac5e-0505b02f2c11"
                  }
                }
              ],
              "id": "10cbfbe2-7b88-4963-812f-1ef784bce6e2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "51a29b01-6d4c-4607-846e-a40c76a1f026"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4149d9ff-ac8a-4ef5-848b-f324c90c50dc"
                  }
                }
              ],
              "id": "956f68b8-ea20-4c46-adbd-79ce0081b163",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9a7dcdae-76ee-4f2b-8023-80e15ac59b77"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a5480669-ed63-4f98-9efb-ccb055072bb1"
                  }
                }
              ],
              "id": "b641e6cf-4f2d-4d25-a0bb-7aa2d4b28030",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "11aa8378-827a-45bc-91c5-285a68ebbfeb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"expiryMonth\",jsonData.creditCards[0].expiryMonth);\r",
                      "    pm.collectionVariables.set(\"expiryYear\",jsonData.creditCards[0].expiryYear);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a08f377b-bc97-4aad-918f-e3ca9378524b"
                  }
                }
              ],
              "id": "d49121b2-36d4-44b2-a657-b1fa5855b693",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4f531385-7e9f-4fc9-bc9e-64c9d2668af2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "c1da7dcc-a727-4ab5-b5d2-81ae31597d4b"
                  }
                }
              ],
              "id": "6cec44ce-733d-4bea-a3a4-c82268ebe4ce",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4a23d948-244a-43c6-a368-4ad5661d9e5f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "aca6965e-16c9-4041-b691-747e54b17d00"
                  }
                }
              ],
              "id": "4ec26ec1-04de-428d-b16f-8f65ff3dfaf2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"11\",\r\n\"ee\": \"77\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "b760e9c3-40db-4c91-ac3b-69180ff2df9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\")); // will ensure duplcate item id is not added in the wallet\r",
                      "   const updatedExpiryYear= jsonData.creditCards[0].expiryYear;\r",
                      "   const updatedExpiryMonth=jsonData.creditCards[0].expiryMonth;\r",
                      "   pm.expect(pm.collectionVariables.get(\"expiryMonth\")).to.not.eql(updatedExpiryMonth); //will ensure that expiry details are updated\r",
                      "   pm.expect(pm.collectionVariables.get(\"expiryYear\")).to.not.eql(updatedExpiryYear);\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "   pm.collectionVariables.clear();\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    pm.collectionVariables.clear();\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b1e5e0a9-3015-4b7a-b0ba-7e607e53d79f"
                  }
                }
              ],
              "id": "65f9ed10-b0f8-436a-b479-a2c7cf1cc381",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "id": "a09ea4be-e3e8-4e1b-a968-bac078d520f6"
        },
        {
          "name": "Add card - My Account Page (Duplicate Card with Verify=True)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "61abbf45-7dc7-49e9-8441-8e65425010df"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "4c5b0484-a072-4a4b-bfcd-22955892f755"
                  }
                }
              ],
              "id": "835ba2c2-4ee9-4f9c-a44b-ae5ec92319e4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "const response=pm.response.status;\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2a35e6e9-5eb6-4889-afc4-ee273065e901"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2ac8e45e-72a8-4a58-aef6-44b3d07c5ebc"
                  }
                }
              ],
              "id": "83e807d8-f6d1-4ff1-afee-d0cb64edbebb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2785cf69-db85-417e-8e95-3dcc4209549b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1dfb482d-2508-49e6-9dfa-8559e33344e5"
                  }
                }
              ],
              "id": "d0ade52c-ab44-4c1d-940c-6a4011a0a4c8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "ee5aad41-c75d-4d53-81b1-c8a1195b1a5a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"expiryMonth\",jsonData.creditCards[0].expiryMonth);\r",
                      "    pm.collectionVariables.set(\"expiryYear\",jsonData.creditCards[0].expiryYear);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e8ce8830-5565-4f17-b9a4-9587bd665749"
                  }
                }
              ],
              "id": "8ad8ed6d-1894-40e7-8e2b-7ef7abefb209",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "22f8c22a-e68c-47cd-acfd-4f0a31fa284d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "a0e49f8e-70c1-428d-a259-1c58390b2df5"
                  }
                }
              ],
              "id": "487ff067-11e3-4b08-9ed0-1dd209eb0329",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a338721f-c64e-4ac1-a97c-8a2c3899d8e5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "64b7065b-272d-471a-a76e-99b6850b0fc2"
                  }
                }
              ],
              "id": "118ff0ee-835b-4599-a5fd-e7f9aaa644da",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"11\",\r\n\"ee\": \"77\",\r\n\"save\": \"true\",\r\n\"verify\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [5000]);"
                    ],
                    "type": "text/javascript",
                    "id": "db5ecc72-7f5a-483d-8935-ce0147611b5a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\")); // Will ensure that duplicate card is not added in the wallet\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6fe47caf-e23a-4c7b-af68-11dcb0de879e"
                  }
                }
              ],
              "id": "5ff32279-1332-43fe-8307-4dbf6c9a1443",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.variables.set(\"clientReference\",string);\r",
                      "pm.variables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "364a5207-fd7d-4ed2-9883-bb35352cf939"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\"); \r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "af46a9a2-e7cf-45a4-a53e-3b4fdabb0e23"
                  }
                }
              ],
              "id": "76700541-aa9c-463e-b255-b0c4257cec5e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "a6f8b59f-d81b-49ff-83bc-2eec7ad3903d"
        },
        {
          "name": "Update Card Details (expiry date)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4f0f19e1-f50c-4709-a307-6e744f906dd6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      " \r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fed7ec25-6614-4e2b-bf19-20fe9b0da430"
                  }
                }
              ],
              "id": "51d6af18-2a10-4a9b-8e5a-37c0afea4054",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);}\r",
                      "     catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3d490a6f-6eb2-48c7-afbf-2d69e2683f32"
                  }
                }
              ],
              "id": "b52c4d4f-9850-452f-a31e-110476b347c0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "66da8201-b298-4ee2-8a7f-a51244ce1f33"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "50afa9f0-6ce1-47b0-bc3a-234ffef5a45f"
                  }
                }
              ],
              "id": "303fc54f-d7d3-457e-bc5f-4ff716f70cc3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "361ba4b6-3127-4e9e-b26d-ad67435d13df"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "03d17be6-1fbe-44f0-b804-c5208ad65e0a"
                  }
                }
              ],
              "id": "ed11a994-7f7e-4f73-a9cf-01648d7bb7df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "5e07660e-b5ef-4f49-9836-d74c4ae61549"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "         pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a82f37a2-9273-4f98-9d21-67fc9bc671c5"
                  }
                }
              ],
              "id": "13598d50-2518-422d-a5ab-fb72473966eb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "007fd614-b2e7-498c-95da-13b0a63e72c3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "56cf3385-ebe9-4d9d-8617-29e46ee15146"
                  }
                }
              ],
              "id": "f66aa68c-34cc-47df-a029-edebca0f43ce",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card - Payment Instrument Exist",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "890ac68b-510e-451f-9da8-16bc60311b0e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify CreditCard Tokenisation returns 200 \",()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData.status.esResponse.text).equal(\"ACCEPTED PAYMENT INSTRUMENT ALREADY EXISTS IN ACCOUNT\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "setTimeout(function(){}, 50000);"
                    ],
                    "type": "text/javascript",
                    "id": "33b7b3b4-fb09-404d-9ef3-1c1fa2c6c811"
                  }
                }
              ],
              "id": "522f6331-2a7c-4ead-b2e1-59f135f66136",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"11\",\r\n\"ee\": \"25\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b72a0259-d258-4a75-b217-ea54e9f5b77a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "622653d9-8918-4a4c-8b81-33594c371429"
                  }
                }
              ],
              "id": "41fc4fb9-1311-4251-80e4-a7dce7f44e93",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "61c9ea8e-3809-4d9f-a037-a06aa4b08576"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.clear()\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "            pm.collectionVariables.clear()\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "10bcf4ca-a03e-4d47-9806-60269a7fbf4e"
                  }
                }
              ],
              "id": "4bbd6e8b-f726-47cf-ab59-4612e482f953",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{itemID}}"
              },
              "response": []
            }
          ],
          "id": "8526f067-67db-449d-8184-e827ace73b92"
        },
        {
          "name": "Update Card Details (cvv)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b29a56c5-9952-40dd-a2ab-d65bc8b59081"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      " \r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6a346af2-0ae7-4304-a5d0-abd37d9209ae"
                  }
                }
              ],
              "id": "2df2d274-21a4-49e5-8593-f6e287aeb262",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);}\r",
                      "     catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "532fdb00-8d79-4e75-8e0f-d1f95dd833dd"
                  }
                }
              ],
              "id": "b9e27a47-cd5c-4deb-91e2-b91cb6aca76d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7c11b0c5-f6c3-498e-bab1-de165e51d764"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7eb59737-306e-4d3e-9c88-7b82de350b82"
                  }
                }
              ],
              "id": "f97bd7dc-ee42-4af1-aeb9-e8dba9eaa701",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "43f15c65-a885-45e9-b676-2403eafbfb0b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9decee13-3b3b-40fe-9a47-4398d73d988a"
                  }
                }
              ],
              "id": "df138d85-d593-47fd-9c3c-7df20c129279",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "1feefec8-04d6-4bde-bcfd-61c5a044899c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "         pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "44420abd-7113-486f-bc1a-9e9afa83922f"
                  }
                }
              ],
              "id": "c4f55c5f-a77a-4faf-8d89-9a84f5eba4da",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "56ee9d9b-e675-4903-afae-46a58d9599dc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "159fa9fc-a5f8-4b1e-9e65-be10abcdc346"
                  }
                }
              ],
              "id": "c762a1ee-c643-43b8-a0a6-2b4d10c22ade",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize visa card - Payment Instrument Exist",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "82f8ad2e-10d0-4d89-aa37-26ffe16c7004"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify CreditCard Tokenisation returns 200 \",()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "     pm.expect(jsonData.status.esResponse.text).equal(\"ACCEPTED PAYMENT INSTRUMENT ALREADY EXISTS IN ACCOUNT\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "setTimeout(function(){}, 50000);"
                    ],
                    "type": "text/javascript",
                    "id": "37a9b97a-cb41-419f-bd44-ea324ff39579"
                  }
                }
              ],
              "id": "42140b9e-a6c6-45ee-b7f0-ea21de13500b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7eb1affc-6cf5-4830-af4f-3118ac4d65e5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      " \r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "       \r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "18e03a7e-efea-4c9a-b6b0-583f7a7fff8b"
                  }
                }
              ],
              "id": "725f5971-43d1-4190-b853-90a6db9519c4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "484365ce-97d4-4d59-848a-4d600332b800"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.clear()\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "            pm.collectionVariables.clear()\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "20ca184d-e354-4c7a-b5c2-3ea67e0272ba"
                  }
                }
              ],
              "id": "d9cb996c-69ce-4ff4-96ec-06b5ee6fb84d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{itemID}}"
              },
              "response": []
            }
          ],
          "id": "fd73d65b-2092-4a39-a29f-8f8a8f877ceb"
        },
        {
          "name": "Check out flow - New Card Place Order",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "aa8bf45b-25f9-44be-a46c-affb9f80786c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5059e0a5-e643-4029-ae8d-f749fe80b11c"
                  }
                }
              ],
              "id": "e0bf2408-0898-4f21-aa10-5b74446a647d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "MerchantProfile",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify the Merchant Profile call returns 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "656b941e-3894-41c4-b874-4e44f3dd0298"
                  }
                }
              ],
              "id": "ba2b0532-a0f6-4809-9c86-ab5c66ff30f8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "url": "{{Apigee Environment URL}}wow/v1/pay/merchants/profile"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "504197e7-0bc3-4c94-95bd-5a98b2838011"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "92358f4d-972b-47ec-9084-69a1f20d210f"
                  }
                }
              ],
              "id": "28fc28eb-818e-4157-9418-2c2c2b76da22",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize with Verify=False",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3d804a5f-1680-40e3-9130-c0e043cb3a24"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "21d2bbe7-015e-4c7e-b022-0340ba1bbf3a"
                  }
                }
              ],
              "id": "02a1e1fc-db38-4546-8149-8e431892c875",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "77205935-9fad-4933-9cb2-5d8bc69e76d7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fdbcf600-00de-4d80-b9c1-100601de5480"
                  }
                }
              ],
              "id": "a8517ede-348a-4e74-8dff-2adf710fb4c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);\r",
                      "setTimeout(function(){}, 10000);"
                    ],
                    "type": "text/javascript",
                    "id": "4ca5bb4e-1c17-4f7b-b1fa-7dd387724471"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      " const jsonData = pm.response.json();\r",
                      " const statusCode= pm.response.code;\r",
                      "\r",
                      "   pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      "   if(statusCode==200){\r",
                      "    pm.test(\"Verify Preauth Transaction is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - New Card Place Order\");\r",
                      "}\r",
                      "function payments(){\r",
                      "    try{\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]); \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "        throw e;\r",
                      "}\r",
                      "\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bf7d89f7-0c75-4fa9-a67d-472eb7d09269"
                  }
                }
              ],
              "id": "4d7acb66-3a17-453d-8fc2-d78938c4f983",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\":\"{{clientReference}}\",\r\n\t\t\t\"orderNumber\": \"{{orderNumber}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ccb96b5c-9985-4cb8-8706-9c5e6cc431ff"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7f535c11-e324-4a23-ac2e-788ced610a91"
                  }
                }
              ],
              "id": "ea605a7f-6b02-4e2e-ac1e-a1061085b281",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{itemID}}"
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cffea812-66c0-414c-aaf0-e03f60162ffd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Credit Card Instrument is Deleted \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.returned).to.eql(Number(1));\r",
                      "     pm.collectionVariables.clear();}\r",
                      "    catch(e) {\r",
                      "      pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a96bcb63-07fd-4ec6-bdfd-66a564f03e6d"
                  }
                }
              ],
              "id": "d7f3dee5-ef42-4bb2-90cf-d100d592230d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "40e3a948-bd9a-41f1-a135-c506a2db43ca"
        },
        {
          "name": "Check out flow - Duplicate Card Place Order",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "688af95d-d61d-48be-bff2-87288abd0e84"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "   pm.response.to.have.status(200); \r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "3986c8ec-02f1-49cb-9ad8-f1ebb3b0a114"
                  }
                }
              ],
              "id": "8b60bcc0-5a70-423f-9649-d40537686da5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ba720bb2-d05e-432d-8c48-6716dc48a3ca"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cea5e965-d387-438d-b599-71f7d2c3c5c8"
                  }
                }
              ],
              "id": "63e8c791-f62e-4e12-a5d0-ae40f60595a9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3567668b-76d5-4207-a91d-acad60aadb73"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8f2cbde4-f764-48ab-a4c0-56cc8423944f"
                  }
                }
              ],
              "id": "f705ef82-2b51-44d2-82f9-2c054159ade4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "2085fd73-07a4-41cc-bcd8-b9a45e0a04e5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "544b9aad-f649-4e9e-a57b-a91001d83888"
                  }
                }
              ],
              "id": "d2fb1c6f-6f8a-46f6-9aaa-9c57e2a9107f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6bf7f6ef-8529-4865-915d-c68a6049f7cd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);"
                    ],
                    "type": "text/javascript",
                    "id": "0772b706-112c-4a08-aa17-43b3873aba77"
                  }
                }
              ],
              "id": "c5597035-e612-47c0-84d3-493e2212c37c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bbfd66b5-7922-4f89-aec8-e5842664d004"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "04d10528-7098-43de-a3f2-b7357b336fb9"
                  }
                }
              ],
              "id": "422245aa-be05-4bfd-a30e-8b18c4fc11f6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "84552723-b137-4b2c-8b81-120402a28196"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8741d350-5732-46c5-8fc0-0bbfe6585858"
                  }
                }
              ],
              "id": "c44b56a4-9741-47bb-aca6-2051340d9944",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "718bd42b-ebdf-4faa-b81f-60ac8ede22c2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c015aad0-398a-4e06-a996-b9665d897fa7"
                  }
                }
              ],
              "id": "e6bdd5fc-c246-4078-9ad4-75729323f84a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8b6b6f1f-fdae-483f-9907-dace87e200e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card after performing the payment is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card after performing the payment is \"+\"VERIFIED\");\r",
                      "    pm.expect(\"The allowed flag status after performing the payment is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after performing the payment is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after performing the payment is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after performing the payment is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after performing the payment is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after performing the payment is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after performing the payment is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after performing the payment is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0ce021e2-056c-40e7-aa86-5a02f6931ff0"
                  }
                }
              ],
              "id": "34e4f74f-6a50-402d-b2bb-3564ab9fab5c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "49f8ee41-f43b-4545-a94e-42b5b1be8348"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fdf362c5-53d3-4ffc-85c9-c48c2db659a6"
                  }
                }
              ],
              "id": "edba5abd-0a4c-4708-a59e-3e4b6db2c11b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "49827442-4779-4270-bad7-f5532ba8afc1"
        },
        {
          "name": "Check Out flow - Transient Card",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f691e5a0-3540-4c91-8018-72060f5ddea1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2247c475-bbc1-4460-bd31-b458727a7ba4"
                  }
                }
              ],
              "id": "bbfdb62e-7804-489d-8bbf-b6a5b87f23b3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5698100a-5e23-4ff6-b548-8b1114fe9146"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4ad04e21-4333-42f3-bb30-a028e2e75f4c"
                  }
                }
              ],
              "id": "e88280fd-d14b-4e26-a9cf-549021235730",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d578f95f-c890-4043-93c3-391314f81707"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.set(\"itemID\",jsonData.paymentInstrument.itemId); \r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d23bcdff-1fd6-45b2-b754-3383f8654fc3"
                  }
                }
              ],
              "id": "a7804661-31c5-401d-b8ae-333f6a46ae58",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"false\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "effd03ed-1f7d-4071-b1aa-dd6b3c123bb8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.creditCards.length).to.eql(0);\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5156a2d6-7096-4b43-b062-571d6b5c259b"
                  }
                }
              ],
              "id": "f2c1d7f4-10d9-426b-a561-2dd2df612c00",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c0bdbe7e-555a-4157-8f73-8b2e95f85509"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      " const statusCode= pm.response.code;\r",
                      "\r",
                      "   pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify Preauth Transaction is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - Transcient Card\");\r",
                      "}\r",
                      "function payments(){\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]); \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "        throw e;\r",
                      "}\r",
                      "\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b77a140c-d101-4e9c-b8ec-4f63fe8b46d8"
                  }
                }
              ],
              "id": "33169ba8-3d8d-4e0c-b769-716c1b17036c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Completion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "52cac620-a62e-41da-93e4-64049d505258"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "   \r",
                      "  if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    completion();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function completion(){\r",
                      "     try{\r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.set(\"CreditCardCompletionRef\", jsonData.completionResponses[0].completionTransactionRef); \r",
                      "        pm.expect(jsonData.completionResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "        pm.expect(jsonData.completionResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw(e);\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a810ced7-47e1-4a6a-a8bf-9e1871ccd3e1"
                  }
                }
              ],
              "id": "1aacc2f5-937b-4769-9e48-c98cc9715a8f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"completions\":\r\n   [\r\n     {\r\n      \"paymentTransactionRef\": \"{{CreditCardPreauthTransactionRef}}\",\r\n      \"amount\": {{Amount}}\r\n     }\r\n   ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/completions?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "completions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Refund",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f1eba679-77ac-49d4-b8c4-72a47426c1ca"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      " pm.test(\"Verify status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    Refund();\r",
                      "   });\r",
                      "} else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund(){\r",
                      " try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw(e);\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "879a44c8-90ad-4077-89f2-57025b6026ab"
                  }
                }
              ],
              "id": "34570f7b-1472-467a-9352-65a1b5e2f9cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{CreditCardCompletionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1e6053ec-7452-4cc7-980e-39171813a5e7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Preauth Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const preauthReferenceNumber =pm.collectionVariables.get(\"CreditCardPreauthTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(preauthReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PREAUTH\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"CreditCardPreauthTransactionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify Completion Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const completionReferenceNumber =pm.collectionVariables.get(\"CreditCardCompletionRef\"); \r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(completionReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"COMPLETION\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"CreditCardCompletionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    verifySchema();\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "    pm.expect(pm.collectionVariables.get(\"creditCardRefundRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].cardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fba88cc8-40d0-4a58-8a50-0051485a623f"
                  }
                }
              ],
              "id": "90159be7-b94f-418e-81c2-c0d0589477dc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment - Transcient Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.variables.set(\"clientReference\",string);\r",
                      "pm.variables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "b2c6ff53-9aec-4f13-a5ca-9e3a4b525ce3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify card is not saved in the wallet \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(400);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BI24\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"NO MATCHING RECORD FOUND.\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c4602b90-9a1e-4673-a90a-7b4e953a92c8"
                  }
                }
              ],
              "id": "80892a4e-8e83-4c48-a416-f5ddeb55497c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "a5065904-273b-45fc-9a46-0e5b8d56b9b4"
        },
        {
          "name": "Checkout out flow - Transcient Card- Duplicate",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f83d6a7a-ec03-4a8b-af3f-5572d4b7d73c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b8bbe4a4-aabb-41d8-b594-d0944f994b6c"
                  }
                }
              ],
              "id": "59abcac2-9bcf-417c-8be2-323e3e32d9a5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d069bee6-c3a9-41b0-8ea6-7d1e179289f3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "91362e04-4f82-4a2d-91a6-0c8a135d54ab"
                  }
                }
              ],
              "id": "f4c3d5ba-6b5a-42e5-b679-a19ebc3b1514",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4d9c4bf6-e65a-4d05-bcea-46bf30277ef0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "afbc67fd-c8b7-4a16-a49f-ce6e5d8bdea5"
                  }
                }
              ],
              "id": "96b23e51-fb15-4f86-994d-491947ce9590",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f5807c07-2550-4de8-a138-216190c55ad3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cf71d5b9-269b-4e9a-8780-bb75f115e3cd"
                  }
                }
              ],
              "id": "c6ca23f3-3597-40d2-8f06-e50484c4c61c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8dfc1e24-c0af-46c8-be5c-f781bbcba0c3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "dbc82693-62d5-428d-81a8-01d30d340921"
                  }
                }
              ],
              "id": "b31ef3ff-a89c-400a-80d6-539cc3fce92d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "454a20f7-86f0-4d6a-885e-59e2c132fc0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2f53c209-f8e5-4c71-ac11-65594f501bb5"
                  }
                }
              ],
              "id": "16b1e447-01ae-4745-a072-a8bfc93a73cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"false\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "ed5c2bd6-0457-48db-abc8-3cf6f66d758c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId); \r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));    \r",
                      "   //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0de21f00-f9e1-4afd-8713-1a1ccd45eaa8"
                  }
                }
              ],
              "id": "7aad6736-9b2e-4428-8881-b9c681992993",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e0c0f219-a998-4432-8034-92a5849e13a2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0e333576-8e0f-46ab-b4b5-ff512d7167de"
                  }
                }
              ],
              "id": "140f06d9-d996-4981-93c5-1f11b99063be",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "03072865-293e-4c66-9975-632be322d895"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);     \r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3c83b209-8375-4ebd-ac96-6b5f91fc0724"
                  }
                }
              ],
              "id": "deedf272-b8d7-4620-ba82-a0a71aef5ac9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "aab5bcb7-0ecc-4c13-a631-4f0b16e8991b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "44b2cba3-8764-4486-b98b-509d69c43784"
                  }
                }
              ],
              "id": "4ce65884-ec7b-4d67-9fce-31815b9b97b4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "04065e2b-10d7-467b-a1dc-17c50ef60723"
        },
        {
          "name": "Check Out flow - Saved Card",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "dfd2feb5-0297-4966-ba88-01c0b5d62840"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8ae56062-0686-4b91-9f81-6cf2c276bf87"
                  }
                }
              ],
              "id": "cfa3f60a-722c-4b64-a1ce-33e23a2caef5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ccb4eff5-22fe-41d9-b8aa-dd6c63e17e21"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2974fabe-c1a6-45e0-9b01-436a758721d7"
                  }
                }
              ],
              "id": "8b1f3510-47e6-4386-b202-a25098208ee1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5799a8c9-edc3-4a70-bac9-df598aa24372"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "af9d8562-9b3a-4282-abe1-d8df42fe61bb"
                  }
                }
              ],
              "id": "0cda47d4-5a79-48ae-99a8-de1f019d4c44",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "84ce1c3e-851d-49b8-b471-e1ad54b14171"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "      let messageString = pm.response.json().creditCards[0].stepUp.url;\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "  pm.collectionVariables.set(\"sessionID\", messageString.split('/')[6]);\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e2ec99d0-85d7-4784-887a-16a46a8310b5"
                  }
                }
              ],
              "id": "b3cbad63-92c3-4f40-8ef1-d4641d9525a4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);\r",
                      "setTimeout(function(){}, 10000);"
                    ],
                    "type": "text/javascript",
                    "id": "f6674701-16ec-45a7-8d1d-fe06c4673f26"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify transaction after performing 1 cent verification \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    //pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    //pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b65daaf5-2665-49e0-b342-2f5e0ffa47cd"
                  }
                }
              ],
              "id": "1289c0f0-4337-4046-80c1-616c9e902ec3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\":\"{{clientReference}}\",\r\n\t\t\t\"orderNumber\": \"{{orderNumber}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "CVVandExpiyTokenization",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0fc138eb-b8f0-4fd7-bd4a-22631e884185"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "    }catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1913a602-23b7-46b2-a99e-1a43b087d79c"
                  }
                }
              ],
              "id": "cc9b1896-acc0-4eb6-954b-25193797036d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": \"{{itemID}}\",\r\n  \"scheme\": \"VISA\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "a70c7f52-1ddc-48f7-8de5-c6e73bb0ed2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      " \r",
                      "    } catch(e) {\r",
                      "\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "90e7d78d-2a34-4763-b11f-10d905e46f8d"
                  }
                }
              ],
              "id": "34e54ee8-c855-400c-a055-20bd3fc1c9b0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "62b0c95f-2dfd-42b1-89ce-75e6a06d1d91"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);     \r",
                      "   pm.expect(\"The status of the Card After Payment is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Payment is \"+\"UNVERIFIED_PERSISTENT\");    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1a9c6a29-f9e8-47b7-abc6-dc6595dbcbc9"
                  }
                }
              ],
              "id": "c9601b12-4775-4d5a-957f-a25a5d5efc12",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "3a84118d-0e0b-4317-a9a1-e48d1c9875f2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "            pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "                pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "697a4ad2-eef5-4e20-86f3-ba5ffc9ada48"
                  }
                }
              ],
              "id": "dda060c6-d570-4485-911a-b3379eaf8437",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PREAUTH\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\t\t\"amount\":{{Amount}},\r\n            \"stepUpToken\": \"{{stepUpToken}}\"\r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "5e787d0a-e95b-4416-954a-07a442268774"
        },
        {
          "name": "Create Payment Agreement - New Card With no immediate charge",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "917c22d3-4529-4833-81ca-5e15ac56c591"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "07140bf2-1d6c-4b34-981d-4d52004af27c"
                  }
                }
              ],
              "id": "e15d6c46-da56-4f66-87f3-cf11f7802684",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function() {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7083907b-da17-4ee8-9049-3635bbb6228c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3f560668-562e-41fa-8fd1-1f63f795a8c1"
                  }
                }
              ],
              "id": "0241ecdd-0589-4541-970d-7bf01585e7e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a2a9c0e3-18a3-433f-81c5-894088c83635"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5fcbf645-4f09-433d-a2ea-485e147a0b25"
                  }
                }
              ],
              "id": "ecf4c9fb-71ef-4d23-8c29-a497520c371a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"VERIFIED\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fb76ecc7-f2c9-49cc-b6b0-35e31cac2f62"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "a6eecae0-140e-48c1-b2fa-7adc7ca606df"
                  }
                }
              ],
              "id": "7a921737-300e-421f-a5ad-13cc3c670718",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1cda4a6c-3917-4770-b829-cc384be26097"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "33b5800f-5a50-4dcf-a967-41affec182bc"
                  }
                }
              ],
              "id": "57f9112e-7eda-405c-852a-b64b773f2af3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0e3e2382-9a4a-4e6d-9c0b-29c0a2f6708a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "094a3eea-0cd6-4359-8972-8dc5943e4a27"
                  }
                }
              ],
              "id": "5240fef3-574c-4483-9d6d-06cf1e79d930",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "ee4f9643-175b-4001-b589-86f280593a2a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "489dba52-dd41-4be4-a4de-4c4fe2c85686"
                  }
                }
              ],
              "id": "573e6e96-76a9-4628-8889-cd960985500a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "bb1a1a10-eee4-46a0-91cb-1745b2245558"
        },
        {
          "name": "Create Payment Agreement - Duplicate card With no immediate payment",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify IDM Login statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9bdd88fd-c21e-43e7-a5c4-cee78918b33c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "67b61479-8845-4105-a260-c07727b99a74"
                  }
                }
              ],
              "id": "c8a8a922-5262-4b9d-b7c5-b2d9fa6dc8e1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "f9f7d491-c718-48f0-a2b6-62cc3e453ae5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d6422cd7-bd48-4113-96c8-e9e71488b32d"
                  }
                }
              ],
              "id": "1138fcaf-3255-4468-b716-e98ad32504c6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0497fb90-957b-4053-a25d-bc510a182b59"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "62ccee2e-7e83-4472-9eec-c7b5e2d0e97b"
                  }
                }
              ],
              "id": "5cf487e0-e2bf-442c-9f26-bb20f6b766ad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1e6d8078-0504-4a7c-8b1d-78f79efcab7e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "0d76a733-bb4c-4148-9228-bcc924e87f5d"
                  }
                }
              ],
              "id": "3b5dffcc-8139-404c-ae10-f1caf632a77f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    pm.collectionVariables.set(\"paymentToken\",jsonData.paymentToken); \r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a4b4db26-1f06-4f88-b3a6-69ac82ca52d1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0c266e3b-7c73-4eaf-aba3-d4ae7ee189b4"
                  }
                }
              ],
              "id": "31ae6ad1-bfd4-48ba-bb54-882c7b8810bc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f48f966d-cfd7-426f-8cb9-6c60656464a9"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "9a00ad3f-fbf0-4f6d-b57d-57ac0d644440"
                  }
                }
              ],
              "id": "e04df0cf-ca95-43d5-9dc1-e42769da0684",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b68c27a8-0cea-4fe4-88a7-122c9e1c4a1c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c20a3afd-bf08-476e-bd00-91b57d9803db"
                  }
                }
              ],
              "id": "e8bc45ec-7f13-4e93-81eb-fab1ab2f098b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bee60467-072f-4145-acac-e8738abf2bbc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "9d9b81fa-6bdf-4689-affc-c0035bfac779"
                  }
                }
              ],
              "id": "f559c371-0f0e-4ad5-a077-af4320aca3a5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate Card-Before Payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3dff26b7-758e-432e-897e-1c01d2ca4fa2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "b7979d91-f51b-4832-b5e2-f998d7b84a79"
                  }
                }
              ],
              "id": "0bb0c272-070d-44a1-92ac-825a2fd5944d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);  \r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "    var oldpaymenttoken=pm.collectionVariables.get(\"paymentToken\");\r",
                      "pm.expect(jsonData.paymentToken).to.not.eql(oldpaymenttoken);\r",
                      "pm.collectionVariables.set(\"paymentToken\",jsonData.paymentToken);\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      " \r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "32a23a10-740c-4d18-beb1-e577d5d29576"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0b9da57a-34f3-4be1-9ccd-0344c9e8607b"
                  }
                }
              ],
              "id": "5ede5bb3-ee05-4f05-8835-7e102a0cea61",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate card-After payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "bac39f4f-f427-4759-9011-4f4f8aca406c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "be7db4fe-0c2a-49a3-9466-533a69a0a805"
                  }
                }
              ],
              "id": "73979c22-3745-4da4-a3b9-5772607f4c7e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment-To check CVV deleted",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "7b80d6c2-d2d9-4a23-b764-0b00a9ff9bd9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "eb3542b8-a84b-4140-8d71-87f0e4a45a2d"
                  }
                }
              ],
              "id": "28c8ecf2-1960-4452-bdfe-563a548410ff",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "ac2ca1c1-e94d-4aef-9f93-3841b7378e41"
        },
        {
          "name": "Create Payment Agreement - New Card With immediate charge",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1a668c19-e296-4767-bfe2-fff4581842fd"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f9af941d-cf9e-4bbe-aec9-f0d2b62817e4"
                  }
                }
              ],
              "id": "14e635f8-e161-4648-b805-170d57b873f0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8f3369a9-602b-4487-9058-6e34df08b993"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2c4e55d4-95cf-4ab4-ab89-e21bd269fc25"
                  }
                }
              ],
              "id": "3d582d93-b42d-4eb6-8a43-9fb293f3b27b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "57308f14-36ff-4431-b12c-f7f43689e70e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0ec78a37-dfd5-4283-bc00-664757268253"
                  }
                }
              ],
              "id": "d381de54-d702-46d8-8100-5afa8fefcc18",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      " pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f0f1c33d-1eca-4a46-b0de-21c4bb83e5db"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "c08b5c49-e746-467e-ad1a-9a420f23c282"
                  }
                }
              ],
              "id": "b9e85795-23d2-4219-8ca5-f4e54ab73891",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement with Immediate Charge is Successful\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);  \r",
                      "    pm.collectionVariables.set(\"PurchaseTransactionRef\",jsonData.transactionReceipt);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7edee5e8-0788-422b-957b-e2e4883a680d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ed4af3de-5cc0-4281-bf7f-c659c2784104"
                  }
                }
              ],
              "id": "eb49fc87-54d3-4491-a756-dacda3029ad9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"true\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      " pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      " pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 1\");\r",
                      "pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c30912c7-1876-443a-9fd7-37f191047cc6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "5f9b9d6b-3fe5-4556-bb88-e3f0fef50e0a"
                  }
                }
              ],
              "id": "bbb6c6f3-d186-437e-b4b3-3e96eeb679b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    Refund();\r",
                      "   });\r",
                      "} else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund(){\r",
                      " try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw(e);\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "799e9954-fe1b-499f-b8fb-b846561da854"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "7331c38a-028d-4f15-9d6b-95685baa2f92"
                  }
                }
              ],
              "id": "51e81033-3345-419f-a4cc-d45f3bef636b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text",
                    "disabled": true
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{clientReference}}\",\r\n  \"orderNumber\": \"{{orderNumber}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{PurchaseTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "74d34fe9-dfa5-4a0c-b500-f1f8b04120d4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const purchaseReferenceNumber =pm.collectionVariables.get(\"PurchaseTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(purchaseReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Verify Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    verifySchema();\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].CardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a121fb53-fdbd-44b1-b10b-48ed555f3d2e"
                  }
                }
              ],
              "id": "ef46d9d4-8613-4497-9030-6e70c86cf486",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "602c037c-005b-4c83-8416-f88409d45525"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8041d8d6-a189-4fdf-8387-102d8f39d727"
                  }
                }
              ],
              "id": "fafc9c66-a2a2-45a5-9f1d-c2ff6b56f333",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "db71cfc2-b3ea-4b55-97e2-16db2f4cfb8d"
        },
        {
          "name": "Create Payment Agreement - Duplicate card With immediate payment",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify IDM Login statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3b5eb9d5-c57c-40f0-9967-646b314996e8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cb034879-41ad-4bea-a021-4f6df5b982fa"
                  }
                }
              ],
              "id": "840abed3-4e81-435a-9b51-a8e82c7d07e8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "123793d1-ef94-4006-94c8-9b0972103e2a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "98418479-72c9-461f-873e-8288e5dd6edd"
                  }
                }
              ],
              "id": "5e49cc29-41d1-4e2a-b844-6115b17ff28a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "653cd72a-24f6-4bdb-9c84-b010064a2f17"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "4542a94a-adb0-40ac-a1a7-e47107a71bb1"
                  }
                }
              ],
              "id": "dece19c2-79bb-4d2a-9904-16704ac25d10",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      " pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3a8b6396-50b6-4aed-a535-64f097e5cdc9"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "0d1df1d4-082c-4db5-9922-27fd1d637905"
                  }
                }
              ],
              "id": "39ca62ce-b61c-4693-b9bc-324e57c9f22f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d59d7390-ccb2-4a5a-9c06-32a9cb6f0bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ebdf5b8f-50b2-46c8-9c92-9d1a657fa8f2"
                  }
                }
              ],
              "id": "befaffa3-d618-4a55-8af0-39f571d2d6e9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"true\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "Init Card Capture -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "let messageString = pm.response.json().cardCaptureURL;\r",
                      "pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      " } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a3024193-3728-47d9-800a-bad10b456376"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7e46da91-6675-4d04-8063-2b86ca1e2a6f"
                  }
                }
              ],
              "id": "88aeb49b-1a93-4245-8822-3bf180ec10ba",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "96c32135-185f-4263-904e-f7ecbb08583f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "62d27cfa-8d90-4ba3-93a6-b9e0bc32dc0e"
                  }
                }
              ],
              "id": "7765bbff-236d-49fd-bb73-32f968261464",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate Card-Before PA",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "   pm.response.to.have.status(200);\r",
                      "   const instrumentId = jsonData.creditCards[0].paymentInstrumentId;     \r",
                      "   pm.expect(instrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "   pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "   pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "   pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "   pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "   pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "61570f3b-81c3-4811-9596-59b160e979c1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "848f493c-e79c-4aa7-beee-6bc178e34a48"
                  }
                }
              ],
              "id": "33630986-3583-405b-86bd-e9dd1ac4c346",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement -Duplicate Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement is Successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    var oldpaymenttoken=pm.environment.get(\"paymentToken\");\r",
                      "pm.expect(jsonData.paymentToken).to.not.eql(oldpaymenttoken);\r",
                      "pm.collectionVariables.set(\"paymentToken\",jsonData.paymentToken);\r",
                      "pm.collectionVariables.set(\"bin\", jsonData.extendedTransactionData[0].value);\r",
                      "    pm.collectionVariables.set(\"PurchaseTransactionRef\",jsonData.transactionReceipt);\r",
                      "\r",
                      "\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "34fc88e9-21b0-48cd-9c28-c3eec8253f7f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1208752a-c8dc-41bc-8f37-6d8403a86383"
                  }
                }
              ],
              "id": "4e9f4e06-7bab-471d-9d04-4904e9515295",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": null,\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"true\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument -Duplicate card-After payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 1\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9887b68a-9340-4651-acd4-6ddfdf3f5c0a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [2000]);"
                    ],
                    "type": "text/javascript",
                    "id": "97e1b6eb-369b-4698-b415-da9d45e6b11b"
                  }
                }
              ],
              "id": "24081608-e209-4162-898e-3659da80034c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0a47f6a2-6fc0-4567-8801-d063bc5b71d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const purchaseReferenceNumber =pm.collectionVariables.get(\"PurchaseTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " console.log(transactionReference);\r",
                      " if(purchaseReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].CardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "19371539-7249-4118-a28d-aeb13271cc99"
                  }
                }
              ],
              "id": "1679431b-423d-4285-8ce4-7df443c95396",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "28387ac2-5ffd-4ca8-b176-0b45f634adeb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "97e855e3-2bad-4578-9459-a49877da6113"
                  }
                }
              ],
              "id": "782b3162-f896-48a2-8b91-091f7b9f7493",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "31e0d886-2420-4c8a-8dd6-166c727a1007"
        },
        {
          "name": "Update Payment Agreement - Funding instrument update(UNVERIFIED Card)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1613d09f-2d63-486f-acb9-e4cd11e1db1d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2d134b26-a9f8-4d29-ad3d-1f79ee5f6d48"
                  }
                }
              ],
              "id": "2fa40aab-d6f3-40fa-9271-811f5c2f17ca",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "312bf733-ef34-4807-ad69-21828a94d048"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1ba59dc9-94af-41a0-9f8e-8a6c352594fb"
                  }
                }
              ],
              "id": "63626958-f8d8-475c-96bf-a1c68faf5d26",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d706077d-7d9b-432b-8c41-17f13a3d1249"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "50accdba-6c96-4910-b3f7-0ce5b7ce11ef"
                  }
                }
              ],
              "id": "673b51d1-5225-44d1-b284-a7756331b815",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "aa6ec228-46be-4118-a495-6f215829542f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "8481b27c-7c9a-4c0c-bcce-685e51c94557"
                  }
                }
              ],
              "id": "cea089f0-6331-4cc4-98ff-2d3758408ce1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "68d12d80-56cb-40ef-80ce-3aab6a7b8532"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "78548e2c-9f1f-4c23-90d2-8828987f5d5f"
                  }
                }
              ],
              "id": "5351d91d-a47a-4d3b-8d02-42ea0aa9cd42",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is saved in the wallet\", function() {\r",
                      "    try{\r",
                      "       pm.response.to.have.status(200);\r",
                      "       pm.collectionVariables.set(\"agreementToken\", jsonData.paymentAgreements[0].paymentToken);\r",
                      "       pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "       pm.expect(jsonData.paymentAgreements[0].paymentInstrumentId).to.eql(pm.collectionVariables.get(\"itemID\"));\r",
                      "       pm.expect(\"The Payment Agreement charge Cycle after Performing Immediate charge false is \"+jsonData.paymentAgreements[0].chargeCycle).to.eql(\"The Payment Agreement charge Cycle after Performing Immediate charge false is 0\");\r",
                      "       pm.expect(\"The status of the Card After Create PaymentAgreement is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Create PaymentAgreement is \"+\"VERIFIED\");\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8a0e72ca-90ae-4f3b-8e12-79c317e686aa"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f6e81e3e-04f0-4933-a5e7-d9d7a0d20677"
                  }
                }
              ],
              "id": "498c9a92-7a75-484b-acef-6aba3818f12c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4d551152-cfcf-4fae-8820-ba81999656b1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8170584e-89c9-43bb-b299-a284761f574f"
                  }
                }
              ],
              "id": "cf710f35-06b5-432a-b790-c102c60d5944",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Credit Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try {  \r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.paymentInstrument.itemId);\r",
                      "pm.collectionVariables.set(\"CardSuffix\",jsonData.paymentInstrument.suffix);\r",
                      "} \r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d1b3e5ca-1b10-4d13-8e42-cb7d5b67c44e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "811c093f-96f4-4075-9c3f-7d93b5c9be3b"
                  }
                }
              ],
              "id": "942052e3-dcba-4939-a346-378c6a03e574",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card1}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "Update Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Update Payment Agreement is successful\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.expect(jsonData.paymentAgreement.cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cd6e9a85-9cad-4a6e-925e-d2832adcc133"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "571dbf7b-94d4-4dca-b345-4eec50def5f0"
                  }
                }
              ],
              "id": "8627477e-b30a-47bc-984e-5b0c3808ab28",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t\"firstName\": \"Francois\",\r\n\t\t\"lastName\": \"test\",\r\n\t\t\"email\": null,\r\n\t\t\"company\": null,\r\n\t\t\"extendedAddress\":\"test\",\r\n\t\t\"streetAddress\": \"sydney\",\r\n\t\t\"suburb\":\"2150\",\r\n\t\t\"stateOrTerritory\":\"Sydney\",\r\n\t\t\"postalCode\": \"2145\",\r\n\t\t\"countryCode\": \"5169\"\r\n\t},\r\n\t\"paymentAgreement\": {\r\n\t\t\"type\": \"RECURRING\",\r\n\t\t\"chargeFrequency\": \"MONTHLY\",\r\n\t\t\"chargeAmount\": 56.00,\r\n\t\t\"paymentInstrumentId\": \"{{itemID}}\"\r\n\t},\r\n\t\"fraudPayload\":\t{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/{{agreementToken}}"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is update in the wallet \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "\r",
                      "}\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "865802c9-8405-4f0a-95ee-17f3b3cae73f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "9155c8f0-5e27-4533-be47-b52e5fa21ae1"
                  }
                }
              ],
              "id": "bcd94312-6fd0-4ca0-9783-a2ac14a0aa8d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "89193b94-1cf8-4f14-bab1-d9618ddf5224"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0bf0abd5-68be-484f-8146-7632d4aab14b"
                  }
                }
              ],
              "id": "b1c8c44d-5da7-43ac-8b31-584aee00b6ea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "8d9e0b1f-7545-4581-82ae-a20c81efff30"
        },
        {
          "name": "Update Payment Agreement - Funding instrument update(VERIFIED Card)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8dd33e1b-b26f-411b-b8f8-0aadcdbf1aec"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c8b5539f-4bbc-40bc-90d8-c7eed105cc2c"
                  }
                }
              ],
              "id": "d923f206-3ff0-419c-b079-482b35dbb722",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "da803744-7a67-4abd-8911-6b949032eaae"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7788732d-b90a-4e5d-b327-b1f1f37781d7"
                  }
                }
              ],
              "id": "87096168-dab4-4067-b71f-869f166b63ae",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0f13eb23-3281-497c-9621-7a5a6350e5ba"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c5df550c-ab8c-4552-9744-8ddae596ede6"
                  }
                }
              ],
              "id": "b41b94cf-5b58-493d-a0a2-e16a4a3a468c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8a10cb42-93e8-4069-a230-b5a55a910bba"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "8823b060-21cd-452c-9837-afdbd1428971"
                  }
                }
              ],
              "id": "46e4a7fa-8e7c-425a-a991-1884176896b5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f5758031-c116-41a0-8bcb-f8aeaf67b432"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1c79aec1-65d4-44ea-9180-39decd168374"
                  }
                }
              ],
              "id": "ee5e5e19-3924-43da-aa7d-cad7ad5068ed",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "     try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"agreementToken\", jsonData.paymentAgreements[0].paymentToken);\r",
                      "\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "2379fd11-9421-419a-b493-dedef0f57cb9"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "aaf56e50-df53-41e8-9a2b-c7f1d962354e"
                  }
                }
              ],
              "id": "c5f2a91c-2352-44ed-b072-ec56e084186b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e3805245-4625-4653-b3e0-0ece8d9ea0e8"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cd614f99-c490-4bbc-8e07-a60fc183a12b"
                  }
                }
              ],
              "id": "3b4d0ca1-a330-48ad-935b-55c1c1f86c6a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Credit Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"itemID\", jsonData.paymentInstrument.itemId);\r",
                      "pm.collectionVariables.set(\"CardSuffix\",jsonData.paymentInstrument.suffix);\r",
                      "} \r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "15aa31b5-aba6-43a7-b059-a31e3ec9acf6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a403c5e5-20ea-4863-9d90-4b37360f19b3"
                  }
                }
              ],
              "id": "68309c6e-e7b6-43dd-948f-edfaede27b5c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card1}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "13180b40-2666-4147-925d-daa82359c207"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0c51b4fe-4abe-4fea-a621-963296b07d75"
                  }
                }
              ],
              "id": "45669833-008b-457b-8e72-2a3dc9e8affd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "CVVandExpiryTokenization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9a2a6194-61bd-47ba-bf7a-0352d91a8527"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "928174c0-165a-4cc7-b48c-1b91d9b99a65"
                  }
                }
              ],
              "id": "7c38ccb4-39c3-40a2-8e96-0ff9eab82152",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": {{itemID}},\r\n  \"scheme\": \"MASTERCARD\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "Update Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Update Payment Agreement is successful\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.expect(jsonData.paymentAgreement.cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d10c0715-32c7-474e-bc5e-4f8d1c64a006"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b51c5b4d-b8ef-4399-919e-3f84037d2e72"
                  }
                }
              ],
              "id": "73471972-eacc-49c2-a8a2-f65a260e3e9e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t\"firstName\": \"Francois\",\r\n\t\t\"lastName\": \"test\",\r\n\t\t\"email\": null,\r\n\t\t\"company\": null,\r\n\t\t\"extendedAddress\":\"test\",\r\n\t\t\"streetAddress\": \"sydney\",\r\n\t\t\"suburb\":\"2150\",\r\n\t\t\"stateOrTerritory\":\"Sydney\",\r\n\t\t\"postalCode\": \"2145\",\r\n\t\t\"countryCode\": \"5169\"\r\n\t},\r\n\t\"paymentAgreement\": {\r\n\t\t\"type\": \"RECURRING\",\r\n\t\t\"chargeFrequency\": \"MONTHLY\",\r\n\t\t\"chargeAmount\": 56.00,\r\n\t\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n         \"stepUpToken\":\"{{stepUpToken}}\"\r\n\t},\r\n\t\"fraudPayload\":\t{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/{{agreementToken}}"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is update in the wallet \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.paymentAgreements[0].cardSuffix).to.eql(pm.collectionVariables.get(\"CardSuffix\"));\r",
                      "\r",
                      "}\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d829550e-cc43-4879-9abe-1ed55425dd8e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "0cf9d42f-b2c1-48c1-a956-720e91014d68"
                  }
                }
              ],
              "id": "6ebbe0e1-9b6d-4fcf-82b6-2057570bfba6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment- To check CVV deletion",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Generate a random string for ClientReference and OrderNumber\r",
                      "\r",
                      "string=Math.random().toString(36).slice(2);\r",
                      "pm.collectionVariables.set(\"clientReference\",string);\r",
                      "pm.collectionVariables.set(\"orderNumber\",string);"
                    ],
                    "type": "text/javascript",
                    "id": "68819d89-b2f0-4a8e-8a5e-0da6b3587314"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7c35cfe8-95c5-4840-b483-02ba7db43983"
                  }
                }
              ],
              "id": "3f2f342e-a1b9-4eb2-8593-ce9d2d56ced5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{clientReference}}\",\r\n    \"orderNumber\": \"{{$randomInt}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{itemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "e69b5076-9b39-4b56-b673-400b4e40ee60"
        },
        {
          "name": "Charge Payment Agreement",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "102ad537-57cd-4460-a476-b3b7b7b9ca33"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "94916f09-9f5b-4fc1-9f20-7a2d4315c533"
                  }
                }
              ],
              "id": "237f8a83-3078-4b4d-ace4-8e1f19b8a103",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "38b4526a-6b8d-4460-a020-4f47fd8f35d7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "65600a38-881f-4773-bbc8-1eecd88be19b"
                  }
                }
              ],
              "id": "a939a0f0-5a8e-4b0f-9502-0fa841bb8db8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6450df93-514a-4554-a0df-8582310a7ab5"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3557405e-29f9-4132-aa0c-f5d613b6b066"
                  }
                }
              ],
              "id": "d2755bec-9f42-426d-b9e9-86692d00d8b7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "3470c1e0-d08f-416f-bff7-ed88cde98d7f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "a39c67ff-9889-4604-b08c-cc8873caa453"
                  }
                }
              ],
              "id": "d261f84e-3fdb-40cf-8f85-63003a67a048",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a04d7741-afe6-4c79-bb0f-67112463f93d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "705f2798-6075-4b42-a4f6-6618f0ecdd9c"
                  }
                }
              ],
              "id": "93d1a66e-c4a6-4642-af0f-77c3450deafb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "   pm.collectionVariables.set(\"paymentToken\",jsonData.paymentAgreements[0].paymentToken);}\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3af484e3-0d7e-436c-8d5c-5461cc1626ab"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "f069d379-4795-4b68-b057-982256ccb6b0"
                  }
                }
              ],
              "id": "57213d4e-b366-450b-b2cc-19e6c130f1c1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Charge Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Create Payment Agreement with Saved Card is successful \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"PurchaseTransactionRef\",jsonData.transactionReceipt);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "18f2f0d1-e91e-42c5-825a-087782dde782"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "53761f49-af75-410b-9b77-c9b840abc89f"
                  }
                }
              ],
              "id": "bb9154d0-a49f-48b1-9b91-1e7397d8f338",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"transactionType\": {\r\n\"creditCard\": \"PURCHASE\"\r\n},\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\"paymentToken\": \"{{paymentToken}}\",\r\n\"amount\": {{Amount}},\r\n\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/charge"
              },
              "response": []
            },
            {
              "name": "Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify CreditCard Refund Transaction is successful \", ()=> {\r",
                      "    Refund();\r",
                      "   \r",
                      "   });\r",
                      "} else{\r",
                      " \r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund(){\r",
                      " try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\"]);\r",
                      "    pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"100\",\"00\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw(e);\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5438c15a-23b4-44cb-8f4a-ddd4dc6e07d1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "776abc84-53b5-49eb-b2ed-436bd68ba26c"
                  }
                }
              ],
              "id": "86e351b7-2417-4088-a511-11c670bd6c37",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{PurchaseTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transaction History",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "964673fd-96fe-4f1d-af23-144aa5608db0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const purchaseReferenceNumber =pm.collectionVariables.get(\"PurchaseTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(purchaseReferenceNumber === transactionReference){\r",
                      "   verifySchema();\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Verify Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    verifySchema();\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "function verifySchema(){\r",
                      "    try{\r",
                      "   const bin=pm.collectionVariables.get(\"bin\");\r",
                      "   const fourDigitBin=bin.slice(0,-2);\r",
                      "   pm.expect(fourDigitBin).to.eql(jsonData.transactions[i].bin); \r",
                      "   pm.expect(pm.collectionVariables.get(\"suffix\")).to.eql(jsonData.transactions[i].CardSuffix);\r",
                      "   pm.expect(parseInt(pm.environment.get(\"Amount\"))).to.eql(jsonData.transactions[i].amount);\r",
                      "\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest(); \r",
                      "    throw e;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      " pm.collectionVariables.clear();\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ed930d1e-b909-4904-87f2-1f9fdb08b14c"
                  }
                }
              ],
              "id": "0fba9ae2-d4e4-4fcd-9a7c-df7f0fef580d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "1bd68406-8acb-41ed-a5ab-95b00f246854"
        },
        {
          "name": "Delete Payment Agreement",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "baa88be5-18c2-40d9-9b43-e201632a9a1f"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "71776a62-decc-490e-89e1-cf1b9ac7f519"
                  }
                }
              ],
              "id": "a2a028b5-8592-4919-b7dc-37846f492127",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a747c298-c046-44d5-9c2a-9f56845554dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a4da6ea4-3041-4477-bab8-36dc8e0306da"
                  }
                }
              ],
              "id": "be04b03a-bfdf-4879-a9c0-04e034727df7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card - Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "45b4cec4-fa6f-4cb5-bca1-05679a27a9b7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "550ad7b8-fcae-4300-92fb-ad538bc1d83d"
                  }
                }
              ],
              "id": "a9411680-2cd9-4ae3-8d73-512b52acea06",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"primary\":\"true\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Instrument in list after Tokenizing the card\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"itemID\", jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"CardSuffix\",jsonData.creditCards[0].cardSuffix);\r",
                      "    //pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "id": "dfa6e750-b189-4140-8029-949dfce845e6"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "654b21d8-3efd-4f17-bf76-385fec50b7d8"
                  }
                }
              ],
              "id": "13529549-b64f-4abc-b55b-01c971f92f58",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Create Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "90ed0044-2d23-42e3-8b93-be6ab45dd411"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a53bb6e6-26df-406d-b19d-1bf28806d688"
                  }
                }
              ],
              "id": "e1aca4ae-512a-40ee-b7ae-7c68cd1b30fa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\"orderNumber\":\"{{$randomInt}}{{$timestamp}}\",\r\n\t\"customerRef\": \"{{$timestamp}}\",\r\n\t\"billingAddress\": {\r\n\t\t \"firstName\": \"TestUser\",\r\n        \"lastName\": \"test\",\r\n        \"email\": \"testuser@gmail.com\",\r\n        \"company\": \"Woolworths\",\r\n        \"extendedAddress\":\"109 george street\",\r\n        \"streetAddress\": \"sydney\",\r\n        \"suburb\":\"Parramatta\",\r\n        \"stateOrTerritory\":\"Sydney\",\r\n        \"postalCode\": \"2567\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n\t\"paymentAgreement\": {\r\n\t\"paymentInstrumentId\": \"{{itemID}}\",\r\n\t\"immediateCharge\":\"false\",\r\n    \"chargeAmount\": {{Amount}},\r\n    \"chargeFrequency\": \"WEEKLY\",\r\n    \"type\":\"RECURRING\"\r\n    \r\n\t},\r\n\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is deleted from the wallet\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"agreementToken\",jsonData.paymentAgreements[0].paymentToken);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7edd5ea6-2ac3-4d44-a808-27a07a3b5a74"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "adcdf58c-c113-4048-be61-ed698d8f1886"
                  }
                }
              ],
              "id": "0e6e1b97-a6e0-4947-a140-3f405d20878d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete the Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Delete Payment Agreement is successful\", function () {\r",
                      "try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "} catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5b1cbabc-6022-4e5f-aa1e-0008e5691fcf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "55f8f5d8-14cd-45f3-ae5d-e050dd7d0fc6"
                  }
                }
              ],
              "id": "eb641a19-331c-4ca6-a5b6-2b2013bd8d88",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/paymentagreements/{{agreementToken}}"
              },
              "response": []
            },
            {
              "name": "List Instrument - Delete Payment Agreement",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify Payment Agreement is deleted from the wallet\", function () {\r",
                      "   try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.expect(jsonData.paymentAgreements.length).to.eql(0);\r",
                      "pm.expect(jsonData.creditCards.length).to.eql(1);\r",
                      "pm.collectionVariables.clear();\r",
                      "} catch(e) {\r",
                      "    pm.collectionVariables.clear();\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "08877085-701a-4cef-8ffd-8052eb0675cc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "3f61ba71-84c6-4c8e-be6a-bb246014fc6a"
                  }
                }
              ],
              "id": "abc2739b-f655-4932-8848-649a786835cb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            }
          ],
          "id": "2f4a523b-66a8-48f5-8345-b88489e42def"
        },
        {
          "name": "Preauth Verify And Fraud Check",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1e6243ad-1c5d-467b-8d0f-9f41949843dc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8f227b21-858f-4aad-860a-f14b69907f29"
                  }
                }
              ],
              "id": "85c24738-5c71-4b3b-abd7-7bb7ed656b53",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000&x-bypass-rate-limit=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    },
                    {
                      "key": "x-bypass-rate-limit",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "72108937-72e3-4582-8826-b53ce9909e1a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8172a9d0-9158-4e16-8842-cf8fdfe6e03e"
                  }
                }
              ],
              "id": "fb9bb45f-4f99-476f-9fc1-c33cecde34f3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 50000);\r",
                      "\r",
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", function () {\r",
                      "    try{\r",
                      "pm.response.to.have.status(200);\r",
                      " pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "        pm.collectionVariables.set(\"CardSuffix\",jsonData.paymentInstrument.suffix);\r",
                      "\r",
                      "        }\r",
                      "catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9ec19e64-2aee-4c01-a666-3c965a649802"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "320175e6-5e8e-478f-83a6-3644ee7f5265"
                  }
                }
              ],
              "id": "5d902931-8024-48eb-8227-5b27f745dab3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"22\",\r\n\"save\": \"true\",\r\n\"verify\":\"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, 20000);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3d7f18f9-8d6f-416e-89b5-21813d2f484f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "      let messageString = pm.response.json().creditCards[0].stepUp.url;\r",
                      "    pm.collectionVariables.set(\"itemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "      pm.collectionVariables.set(\"sessionID\", messageString.split('/')[6]);\r",
                      "  pm.collectionVariables.set(\"paymentToken\", jsonData.creditCards[0].paymentToken);\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d582e934-bad0-467c-b086-3c03393f8e0d"
                  }
                }
              ],
              "id": "11491b1a-2ef4-4ea6-80ba-e9e516616521",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "CVVandExpiyTokenization",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ce430f49-5557-4fa6-921d-9b48bfcff1f2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "    }catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d507e3db-2980-425a-97df-fb631ce44927"
                  }
                }
              ],
              "id": "8a5ac2e9-7e10-4ea5-a6f5-67adf0fd54e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": {{itemID}},\r\n  \"scheme\": \"VISA\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "VerifyandFraud",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "741adee2-a52a-4547-ba7e-df30a74b0855"
                  }
                }
              ],
              "id": "81416538-ce94-4621-b5c8-de0a6e0ac50e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-api-key",
                    "value": "{{WOWOL-APIKEY}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"clientReference\": \"TestReference{{$randomInt}}\",\r\n\"paymentInstruments\": [\r\n{\r\n\"paymentToken\": \"{{paymentToken}}\",\r\n\"stepUpToken\":\"{{stepUpToken}}\"\r\n    \r\n}\r\n],\r\n\"fraudPayload\": {   \r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>woolworths_online</merchantID>\\r\\n  <merchantReferenceCode>1234-26I1</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n\r\n}\r\n}"
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/instruments/verify?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "instruments",
                    "verify"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GetStepUpToken",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c2ed50f4-c38c-4e11-a03e-fab449123685"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CVV Capture Iframe and get the stepupToken \", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"stepUpToken\", jsonData.stepUpToken);\r",
                      "    }catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f662c508-8dc9-4e20-a208-c68fbf618875"
                  }
                }
              ],
              "id": "5fdbf9bd-2f88-4594-9031-a72a31bc3120",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n     \"authentication\": {\r\n          \"credentials\": [{\r\n            \"type\": \"PERSON\",\r\n            \"sessionID\": \"{{sessionID}}\"\r\n         }]\r\n     },\r\n  \"cvv\": \"101\",\r\n  \"expiryMonth\": \"12\",\r\n  \"expiryYear\": \"99\",\r\n  \"itemId\": {{itemID}},\r\n  \"scheme\": \"VISA\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}container-ws/tokens/cvvandexpiry"
              },
              "response": []
            },
            {
              "name": "Payment",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "02c7750f-c2c6-4443-b598-0fd4915d3b78"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      "   pm.test(\"Verify Transaction is successful \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"CreditCardPreauthTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);   \r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "            \r",
                      "    } catch(e) {\r",
                      "               \r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }  \r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "48bdf216-b0cb-4aa0-9efe-aef6fa23269b"
                  }
                }
              ],
              "id": "756ec02b-1ef2-44cf-8b08-618535be611a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n\"transactionType\": {\r\n    \"creditCard\": \"PREAUTH\", \r\n    \"giftCard\": \"PURCHASE\", \r\n    \"payPal\": \"PURCHASE\" ,\r\n    \"debitCard\": \"PURCHASE\",   \r\n    \"googlePay\": {   \r\n      \"creditCard\": \"PREAUTH\",   \r\n      \"debitCard\": \"PURCHASE\"\r\n    },\r\n    \"applePay\": {    \r\n      \"creditCard\": \"PREAUTH\",  \r\n      \"debitCard\": \"PURCHASE\"\r\n    }\r\n  },\r\n  \"clientReference\": \"{{clientReference}}\",\r\n  \"orderNumber\": \"{{orderNumber}}\",\r\n  \"shippingAddress\": {\r\n    \"firstName\": \"Francois\",\r\n    \"lastName\": \"van der Merwe\",\r\n    \"company\": \"Private\",\r\n    \"extendedAddress\": \"Unit 1\",\r\n    \"streetAddress\": \"22 River Oak Circuit\",\r\n    \"suburb\": \"Kellyville\",\r\n    \"stateOrTerritory\": \"NSW\",\r\n    \"postalCode\": \"2155\",\r\n    \"countryCode\": \"AU\"\r\n  },\r\n  \"payments\": [\r\n    {\r\n   \"paymentInstrumentId\": \"{{itemID}}\",\r\n  \"amount\":21.00,\r\n  \"stepUpToken\": \"{{stepUpToken}}\"\r\n    }\r\n      \r\n  ],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "94bd09f6-1698-4880-987a-7bee88824970"
        },
        {
          "name": "Check out flow-Split Payment with Saved CC+GC",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Validate status Code is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c53c4f04-3481-4c64-8e2a-6212f71f818c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9cf6b569-506b-4b47-a36e-9286c51bc66b"
                  }
                }
              ],
              "id": "26db479a-c6f2-4792-8016-76814e35b4af",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"username\": \"{{$timestamp}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Init Card Capture",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1f9f2994-a833-40c1-82e2-22734d71ad8a"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "09606982-dd6f-4066-8cd1-94ae6e50595a"
                  }
                }
              ],
              "id": "cd2420f7-de43-472e-9800-32212099654a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "cards",
                    "initcapture"
                  ],
                  "query": [
                    {
                      "key": "Authorization",
                      "value": "Bearer {{accessToken}}",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0b521e0a-146e-4419-9588-46f0681fecef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "54418b26-b7db-43d4-9ad4-c011c1962961"
                  }
                }
              ],
              "id": "f79d8c3c-9971-48cc-ab18-44a8440cb1f8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{sessionID}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "Tokenize GiftCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify GiftCard Tokenization statusCode is 200\", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "47df432c-5731-4a46-a613-947fa02bb401"
                  }
                }
              ],
              "id": "862983b6-e36d-4e01-b726-480fb6ac3252",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"cardNumber\":\"{{GiftCardNumber}}\",\r\n\"pinCode\": \"{{GiftCardPINCode}}\",\r\n\"primary\": true,\r\n\"save\": true\r\n}\r\n\r\n\r\n\t",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/giftcards/tokenize?apikey={{ApiKey}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "giftcards",
                    "tokenize"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{ApiKey}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument Response\", function() {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCarditemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "        pm.collectionVariables.set(\"giftCarditemID\",jsonData.giftCards[0].paymentInstrumentId);\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the Credit Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The status of the Card After Tokenizing the GiftCard Card Instrument is \"+jsonData.creditCards[0].status).to.eql(\"The status of the Card After Tokenizing the GiftCard Card Instrument is \"+\"UNVERIFIED_PERSISTENT\");\r",
                      "    pm.expect(\"The allowed flag status after Tokenizing the Card is \"+jsonData.creditCards[0].allowed).to.eql(\"The allowed flag status after Tokenizing the Card is \"+true);\r",
                      "    pm.expect(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+jsonData.creditCards[0].cvvValidated).to.eql(\"The CVV Validated flag value after Tokenizing the CreditCard Instrument is \"+false);\r",
                      "    pm.expect(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].expired).to.eql(\"The Expired flag value after Tokenizing the Credit Card Instrument is \"+false);\r",
                      "    pm.expect(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+jsonData.creditCards[0].requiresCVV).to.eql(\"The Require CVV flag value after Tokenizing the Credit Card Instrument is \"+true);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4ae6f077-5c7a-434e-8097-0e3634688cd3"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "7b91d4a1-f073-46a2-a330-ac525c480764"
                  }
                }
              ],
              "id": "a3db6d97-bfe3-4d2d-95bf-af52e15290bc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment with CreditCard and GiftCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " const jsonData = pm.response.json();\r",
                      " const statusCode= pm.response.code;\r",
                      "\r",
                      "  pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      " if(statusCode==200){\r",
                      "    pm.test(\"Verify Split Payment with CreditCard and GiftCard is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - CVV Deleted\");\r",
                      "}\r",
                      "\r",
                      "function payments(){\r",
                      "    try{\r",
                      "    pm.collectionVariables.set(\"CreditCardTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"GiftCardTransactionRef\", jsonData.giftCards[0].paymentTransactionRef); \r",
                      "    pm.collectionVariables.set(\"creditCardSuffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"giftCardSuffix\", jsonData.giftCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.partialSuccess).equals(false);\r",
                      "    pm.expect(jsonData.giftCards[0].externalServiceMessage).to.eql(\"ACCEPTED\");\r",
                      "    pm.expect(jsonData.giftCards[0].externalServiceCode).to.eql(\"00\");\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "  }\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ebfcf32d-2750-4607-bbaa-02183d396e10"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6578b8dd-fd96-443f-bbdd-94bfcb2ca948"
                  }
                }
              ],
              "id": "e9965da0-a146-4a33-b3ed-583852d17ae1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionType\": {\r\n    \"creditCard\": \"PURCHASE\",\r\n    \"giftCard\": \"PURCHASE\",\r\n    \"payPal\": \"PURCHASE\",\r\n    \"androidPay\": {\r\n      \"creditCard\": \"PREAUTH\",\r\n      \"debitCard\": \"PURCHASE\"\r\n    },\r\n    \"applePay\": {\r\n      \"creditCard\": \"PREAUTH\",\r\n      \"debitCard\": \"PURCHASE\"\r\n    }\r\n  },\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"shippingAddress\": {\r\n    \"firstName\": \"Francois\",\r\n    \"lastName\": \"van der Merwe\",\r\n    \"company\": \"Private\",\r\n    \"extendedAddress\": \"Unit 1\",\r\n    \"streetAddress\": \"22 River Oak Circuit\",\r\n    \"suburb\": \"Kellyville\",\r\n    \"stateOrTerritory\": \"NSW\",\r\n    \"postalCode\": \"2155\",\r\n    \"countryCode\": \"AU\"\r\n  },\r\n  \"payments\": [\r\n    {\r\n      \"paymentInstrumentId\": \"{{creditCarditemID}}\",\r\n      \"amount\": {{Amount}}\r\n    },\r\n    {\r\n      \"paymentInstrumentId\": \"{{giftCarditemID}}\",\r\n      \"amount\": {{GiftCardAmount}}\r\n    }\r\n  ],\r\n  \"extendedMerchantData\": [\r\n    {\r\n      \"field\": \"correlationId\",\r\n      \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n    }\r\n  ],\r\n  \"fraudPayload\": {\r\n    \"provider\": \"cybersource\",\r\n    \"version\": \"CyberSourceTransaction_1.101\",\r\n    \"format\": \"XML\",\r\n    \"responseFormat\": \"XML\",\r\n    \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Refund for CreditCard and GiftCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      "  pm.test(\"Verify Refund status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "  if(statusCode==200){\r",
                      "    pm.test(\"Verify Refund Transaction is successful \", ()=> {\r",
                      "    refund();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest(\"Payment - CVV Deleted\");\r",
                      "}\r",
                      " function refund(){\r",
                      "      try{\r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.collectionVariables.set(\"creditCardRefundRef\",jsonData.refundResponses[0].refundTransactionRef);\r",
                      "        pm.collectionVariables.set(\"giftCardRefundRef\",jsonData.refundResponses[1].refundTransactionRef);\r",
                      "        pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "        pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"00\",\"100\"]);\r",
                      "        pm.expect(jsonData.refundResponses[1].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "        pm.expect(jsonData.refundResponses[1].externalServiceCode).to.be.oneOf([\"00\",\"100\"]);\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      " }\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "31b324dc-84bc-49e1-87d1-e115fe6112af"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ff3f75e9-745e-464e-b46d-5305a4cd8a18"
                  }
                }
              ],
              "id": "017bc16f-fc43-40a4-878a-e75f5b332d82",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{CreditCardTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    },\r\n    {\r\n       \"paymentTransactionRef\": \"{{GiftCardTransactionRef}}\",\r\n      \"amount\":{{GiftCardAmount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Transction History",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const preauthReferenceNumber =pm.collectionVariables.get(\"CreditCardTransactionRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(preauthReferenceNumber === transactionReference){\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"CreditCardTransactionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify CreditCard Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"creditCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "    pm.expect(pm.collectionVariables.get(\"creditCardRefundRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify GiftCard Purchase Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const completionReferenceNumber =pm.collectionVariables.get(\"GiftCardTransactionRef\"); \r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(completionReferenceNumber === transactionReference){\r",
                      "   pm.expect(\"PURCHASE\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "   pm.expect(pm.collectionVariables.get(\"GiftCardTransactionRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify GiftCard Refund Transaction\", ()=> {\r",
                      "try{\r",
                      "const total = jsonData.total;\r",
                      "const refundReferenceNumber =pm.collectionVariables.get(\"giftCardRefundRef\");\r",
                      " for (i=0;i<total;i++){\r",
                      " const transactionReference=jsonData.transactions[i].transactionRef; \r",
                      " if(refundReferenceNumber === transactionReference){\r",
                      "    pm.expect(\"REFUND\").to.eql(jsonData.transactions[i].transactionType);\r",
                      "    pm.expect(pm.collectionVariables.get(\"giftCardRefundRef\")).to.eql(jsonData.transactions[i].transactionRef);\r",
                      "\r",
                      "  }\r",
                      " }   \r",
                      "} catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "   }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0c705190-b898-4726-905c-ece2c6566f4c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1580277d-3c53-4cbf-a9b6-bb3cb2b99dce"
                  }
                }
              ],
              "id": "1f7215d7-4fed-45ca-ab87-066306ed5f75",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transactionTypes\": [\r\n    \"PREAUTH\",\"PURCHASE\",\"COMPLETION\",\"VOID\",\"REFUND\"\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/transactions?apikey={{WOWOL-APIKEY}}",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "transactions"
                  ],
                  "query": [
                    {
                      "key": "apikey",
                      "value": "{{WOWOL-APIKEY}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment - CVV Deleted",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8d306551-205c-451f-8b08-8812d7464c83"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "    pm.test(\"Verify CVV is Deleted \", ()=> {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(501);\r",
                      "    pm.expect(jsonData.errorCode).to.eql(\"BV59\");\r",
                      "    pm.expect(jsonData.errorMessage).to.eql(\"STEP UP TOKEN REQUIRED\");\r",
                      "    pm.collectionVariables.clear();\r",
                      "    } catch(e) {\r",
                      "        pm.collectionVariables.clear();\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ee64b2fd-b692-4a61-af6d-714061e301b0"
                  }
                }
              ],
              "id": "885416f7-be30-40fd-80c5-86a3a8bce946",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{accessToken}}"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "type": "text",
                    "value": "true"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"transactionType\": {\r\n        \"creditCard\": \"PREAUTH\",\r\n        \"giftCard\": \"PURCHASE\",\r\n        \"payPal\": \"PURCHASE\",\r\n        \"androidPay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        },\r\n        \"applePay\": {\r\n            \"creditCard\": \"PREAUTH\",\r\n            \"debitCard\": \"PURCHASE\"\r\n        }\r\n    },\r\n    \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n    \"shippingAddress\": {\r\n        \"firstName\": \"Francois\",\r\n        \"lastName\": \"van der Merwe\",\r\n        \"company\": \"Private\",\r\n        \"extendedAddress\": \"Unit 1\",\r\n        \"streetAddress\": \"22 River Oak Circuit\",\r\n        \"suburb\": \"Kellyville\",\r\n        \"stateOrTerritory\": \"NSW\",\r\n        \"postalCode\": \"2155\",\r\n        \"countryCode\": \"AU\"\r\n    },\r\n    \"payments\": [\r\n        {\r\n            \"paymentInstrumentId\": \"{{creditCarditemID}}\",\r\n            \"amount\": 17,\r\n            \"controlData\": {\r\n                \"tokenType\": \"PAN\"\r\n            }\r\n        }\r\n    ],\r\n    \"storeData\": {\r\n        \"terminalId\": \"W2701081\",\r\n        \"laneId\": \"042\",\r\n        \"stan\": \"555001\",\r\n        \"rrn\": \"000000006564\",\r\n        \"transactionTimestamp\": \"1607915015449\"\r\n    },\r\n    \"extendedMerchantData\": [\r\n        {\r\n            \"field\": \"correlationId\",\r\n            \"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n        }\r\n    ],\r\n    \"fraudPayload\": {\r\n        \"provider\": \"cybersource\",\r\n        \"version\": \"CyberSourceTransaction_1.101\",\r\n        \"format\": \"XML\",\r\n        \"responseFormat\": \"XML\",\r\n        \"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "841ac599-a8f2-45a3-965c-e8a397c4c209"
        },
        {
          "name": "Check out flow - Split Payment (CC + PP)",
          "item": [
            {
              "name": "IDM Login",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verify IDM Login statusCode is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"accessToken\",jsonData.accessToken);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "710a2132-7592-478e-87a5-0fbfd2b31f56"
                  }
                }
              ],
              "id": "d2313167-fe28-4125-a9c7-ca7b167cfc6d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{ \r\n\t\"shopperId\": \"{{ShopperID}}\",\r\n    \"username\": \"savedcarduser\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/idm/servers/token?access_token_exp=3600&refresh_token_exp=2592000",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "idm",
                    "servers",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "access_token_exp",
                      "value": "3600"
                    },
                    {
                      "key": "refresh_token_exp",
                      "value": "2592000"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "   if(jsonData.creditCards.length===1){\r",
                      "    pm.collectionVariables.set(\"creditCardItemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    postman.setNextRequest(\"Delete Instrument-creditCard\");\r",
                      "   }else{\r",
                      "       postman.setNextRequest(\"Init Card Capture Call\");\r",
                      "   }  \r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e; \r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "beec5862-4127-4575-b47c-c979852f109c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "bb4697bd-8ba8-46f6-af00-6d83ce24a2ff"
                  }
                }
              ],
              "id": "cc984caf-9afd-41d7-9502-618570990401",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Delete Instrument-creditCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e; \r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "31b184ce-e3ad-4585-a32d-664588df2c28"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "9a77cfa0-dfc3-453e-ae2d-28dae625a382"
                  }
                }
              ],
              "id": "068260b3-e0f8-40fa-8312-eb23c2b1ef56",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments/{{creditCardItemID}}"
              },
              "response": []
            },
            {
              "name": "Init Card Capture Call",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7e007a03-1399-4432-a87d-ed7ecbf3bea0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData= pm.response.json();\r",
                      "pm.test(\"Verify Init Card Capture Iframe statusCode is 200\", function () {\r",
                      "   try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    let messageString = pm.response.json().cardCaptureURL;\r",
                      "    pm.collectionVariables.set(\"sessionID\", messageString.split('/')[5]);\r",
                      "    }\r",
                      "    catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e5c467c1-575b-4944-8628-dea3c4ab1399"
                  }
                }
              ],
              "id": "ad0e08b2-2325-4880-8152-5d4ab2199b41",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n   \"clientReference\" : \"TestReference{{$randomInt}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/cards/initcapture"
              },
              "response": []
            },
            {
              "name": "Tokenize Card",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "218c8a7d-8771-4bee-9110-68e2dff02971"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify CreditCard Tokenisation returns 200\", ()=> {\r",
                      "    try {  \r",
                      "        pm.response.to.have.status(200);\r",
                      "        pm.expect(jsonData.status.responseText).to.eql(\"ACCEPTED\");\r",
                      "        pm.expect(jsonData.status.responseCode).to.eql(\"00\");\r",
                      "\r",
                      "    } catch(e) {\r",
                      "        postman.setNextRequest();\r",
                      "        throw e;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1856b785-b570-4497-8976-17fce8a71e8c"
                  }
                }
              ],
              "id": "7d01fb7f-530d-4594-a65a-cb6426742620",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "type": "text",
                    "value": "{{ApiKey}}"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "Bearer {{sessionID}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"aa\": \"{{ST Enabled Visa Credit Card}}\",\r\n\"bb\": \"{{ST Enabled Visa Credit Card CVV}}\",\r\n\"cc\": \"My Card\",\r\n\"dd\": \"12\",\r\n\"ee\": \"99\",\r\n\"save\": \"true\",\r\n\"verify\": \"false\",\r\n\"primary\":\"true\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{DigitalPay Environment URL}}tokenisation/creditcard"
              },
              "response": []
            },
            {
              "name": "List Instrument",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "pm.test(\"Verify List Instrument response statusCode is 200\", function () {\r",
                      "    try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardItemID\",jsonData.creditCards[0].paymentInstrumentId);\r",
                      "    pm.collectionVariables.set(\"payPalItemID\",jsonData.payPal[0].paymentInstrumentId)\r",
                      "    }catch(e){\r",
                      "    postman.setNextRequest();\r",
                      "    throw e; \r",
                      "    }\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "414b56cc-546b-4696-9b31-7793ec1cc427"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){}, [1000]);"
                    ],
                    "type": "text/javascript",
                    "id": "16891901-f331-47bc-9040-21124dfc9446"
                  }
                }
              ],
              "id": "34390eba-d883-45d8-8e80-9ef8050557e6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "{{Apigee Environment URL}}wow/v1/pay/instruments"
              },
              "response": []
            },
            {
              "name": "Payment with PayPal and CreditCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      "   pm.test(\"Verify Payment status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      "    if(statusCode==200){\r",
                      "    pm.test(\"Verify Split Payment with CreditCard and PayPal is successful \", ()=> {\r",
                      "    payments();\r",
                      "   });\r",
                      "}else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function payments(){\r",
                      "try{\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"creditCardTransactionRef\", jsonData.creditCards[0].paymentTransactionRef);\r",
                      "    pm.collectionVariables.set(\"payPalTransactionRef\", jsonData.payPal[0].paymentTransactionRef); \r",
                      "    pm.collectionVariables.set(\"suffix\", jsonData.creditCards[0].receiptData.cardSuffix);\r",
                      "    pm.collectionVariables.set(\"bin\", jsonData.creditCards[0].extendedTransactionData[0].value);\r",
                      "    pm.expect(jsonData.fraudResponse.reasonCode).to.be.oneOf([\"100\",\"480\"]);  \r",
                      "    pm.expect(jsonData.fraudResponse.decision).to.be.oneOf([\"ACCEPT\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.partialSuccess).equals(false);\r",
                      "    pm.expect(jsonData.payPal[0].externalServiceMessage).to.eql(\"ACCEPTED\");\r",
                      "    pm.expect(jsonData.payPal[0].externalServiceCode).to.eql(\"00\");\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceMessage).to.be.oneOf([\"ACCEPT\",\"APPROVED\",\"REVIEW\"]);\r",
                      "    pm.expect(jsonData.creditCards[0].externalServiceCode).to.be.oneOf([\"100\",\"00\",\"480\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      " }\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "db2677c4-7ba0-4441-812a-f5e717202932"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e86c416e-b0f0-4022-851a-5b473d4a296c"
                  }
                }
              ],
              "id": "4244e6af-75f7-4cf1-b67a-76e4615345d4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "\t\t\t{\r\n\t\t\t  \"transactionType\": {\r\n\t\t\t    \"creditCard\": \"PURCHASE\", \r\n\t\t\t    \"giftCard\": \"PURCHASE\", \r\n\t\t\t    \"payPal\": \"PURCHASE\" ,\r\n\t\t\t    \"androidPay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t},\r\n\t\t\t\"applePay\": {\r\n\t\t\t\"creditCard\": \"PREAUTH\",\r\n\t\t\t\"debitCard\": \"PURCHASE\"\r\n\t\t\t}\r\n\t\t\t  },\r\n\t\t\t\"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n\t\t\t\"shippingAddress\": {\r\n\t\t\t    \"firstName\": \"Francois\",\r\n\t\t\t    \"lastName\": \"van der Merwe\",\r\n\t\t\t    \"company\": \"Private\",\r\n\t\t\t    \"extendedAddress\": \"Unit 1\",\r\n\t\t\t    \"streetAddress\": \"22 River Oak Circuit\",\r\n\t\t\t    \"suburb\": \"Kellyville\",\r\n\t\t\t    \"stateOrTerritory\": \"NSW\",\r\n\t\t\t    \"postalCode\": \"2155\",\r\n\t\t\t    \"countryCode\": \"AU\"\r\n\t\t\t  },\r\n\t\t\t\"payments\": [\r\n            {\r\n            \"paymentInstrumentId\": \"{{creditCardItemID}}\",\r\n\t\t\t\"amount\":{{Amount}}\r\n            },\r\n            {\r\n            \"paymentInstrumentId\": \"{{payPalItemID}}\",\r\n\t\t\t\"amount\":{{Amount}}   \r\n            }\r\n\t\t\t],\r\n\t\t\t\"extendedMerchantData\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"field\": \"correlationId\", \r\n\t\t\t\t\t\t\"value\": \"b45ab085213bb0d580dd3119413d9c03\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\"fraudPayload\":{\t\r\n\"provider\": \"cybersource\",\r\n\"version\": \"CyberSourceTransaction_1.101\",\r\n\"format\": \"XML\",\r\n\"responseFormat\": \"XML\",\r\n\"message\": \"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\"?>\\r\\n<RequestMessage xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\">\\r\\n  <merchantID>{{merchantId}}</merchantID>\\r\\n  <merchantReferenceCode>1234-26IO8JUN</merchantReferenceCode>\\r\\n  <billTo>\\r\\n    <firstName>AravindKumar</firstName>\\r\\n    <lastName>Gunasekaran</lastName>\\r\\n    <street1>210</street1>\\r\\n    <city>MINTO</city>\\r\\n    <state>NSW</state>\\r\\n    <postalCode>2566</postalCode>\\r\\n    <country>AU</country>\\r\\n    <phoneNumber>0469813438</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n    <ipAddress>202.39.218.236</ipAddress>\\r\\n    <dateOfBirth>1987-02-14</dateOfBirth>\\r\\n    <customerID>3732442</customerID>\\r\\n  </billTo>\\r\\n  <shipTo>\\r\\n    <firstName>Pon</firstName>\\r\\n    <lastName>Malar</lastName>\\r\\n    <phoneNumber>0442911234</phoneNumber>\\r\\n    <email>accept@accept.com</email>\\r\\n  </shipTo>\\r\\n  <item id=\\\"0\\\">\\r\\n    <unitPrice>7.59</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Mccain Protein Plus Frozen Meal Satay Chicken</productName>\\r\\n    <productSKU>483660</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"1\\\">\\r\\n    <unitPrice>2.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Habee Savers Needles Household Repair</productName>\\r\\n    <productSKU>159489</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"2\\\">\\r\\n    <unitPrice>6.60</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Breast Fillet Skinless Small</productName>\\r\\n    <productSKU>118963</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"3\\\">\\r\\n    <unitPrice>5.43</unitPrice>\\r\\n    <quantity>5</quantity>\\r\\n    <productName>Chicken Drumsticks </productName>\\r\\n    <productSKU>169014</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"4\\\">\\r\\n    <unitPrice>3.50</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Chicken Thigh Cutlets Skinless</productName>\\r\\n    <productSKU>166830</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"5\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>4</quantity>\\r\\n    <productName>Lamb Diced Heart Smart</productName>\\r\\n    <productSKU>208970</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"6\\\">\\r\\n    <unitPrice>4.94</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Chicken Lovely Legs Free Range</productName>\\r\\n    <productSKU>700257</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"7\\\">\\r\\n    <unitPrice>19.64</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Macro Organic Whole Chicken</productName>\\r\\n    <productSKU>229320</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"8\\\">\\r\\n    <unitPrice>9.60</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Msa Australian Beef Steak Porterhouse</productName>\\r\\n    <productSKU>208988</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"9\\\">\\r\\n    <unitPrice>15.20</unitPrice>\\r\\n    <quantity>3</quantity>\\r\\n    <productName>Roast Pork Shoulder Boneless Small</productName>\\r\\n    <productSKU>203420</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"10\\\">\\r\\n    <unitPrice>10.80</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Select Corned Beef Silverside </productName>\\r\\n    <productSKU>148345</productSKU>\\r\\n  </item>\\r\\n  <item id=\\\"11\\\">\\r\\n    <unitPrice>13.00</unitPrice>\\r\\n    <quantity>2</quantity>\\r\\n    <productName>Clairol Nice N Easy 114a Natural Lightest Golden Brown</productName>\\r\\n    <productSKU>226536</productSKU>\\r\\n  </item>\\r\\n  <purchaseTotals>\\r\\n    <currency>AUD</currency>\\r\\n    <grandTotalAmount>298.09</grandTotalAmount>\\r\\n  </purchaseTotals>\\r\\n  <merchantDefinedData>\\r\\n    <mddField id=\\\"19\\\">Pickup</mddField>\\r\\n    <mddField id=\\\"10\\\">NO</mddField>\\r\\n    <mddField id=\\\"3\\\">Woolworths WOLLI CREEK, WOLLI CREEK</mddField>\\r\\n    <mddField id=\\\"1\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"2\\\">NSW</mddField>\\r\\n    <mddField id=\\\"12\\\">NO</mddField>\\r\\n    <mddField id=\\\"16\\\">103</mddField>\\r\\n    <mddField id=\\\"23\\\"></mddField>\\r\\n    <mddField id=\\\"17\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"18\\\">2017-09-18 12:40</mddField>\\r\\n    <mddField id=\\\"25\\\">2017-09-22 16:00</mddField>\\r\\n    <mddField id=\\\"20\\\">WEB</mddField>\\r\\n    <mddField id=\\\"57\\\">Normal</mddField>\\r\\n    <mddField id=\\\"58\\\"></mddField>\\r\\n    <mddField id=\\\"59\\\" />\\r\\n    <mddField id=\\\"60\\\">298.09</mddField>\\r\\n  </merchantDefinedData>\\r\\n  <afsService run=\\\"true\\\" />\\r\\n  <deviceFingerprintID>18SJBB-26IO8JUN</deviceFingerprintID>\\r\\n</RequestMessage>\"\r\n}\r\n\r\n}\r\n\t\t\t\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/payments?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "payments"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Refund for PayPal and CreditCard",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "const statusCode= pm.response.code;\r",
                      "\r",
                      "pm.test(\"Verify Refund status Code is 200 \", ()=> {\r",
                      "    pm.response.to.have.status(200);\r",
                      "   });\r",
                      "\r",
                      "if(statusCode==200){\r",
                      "pm.test(\"Verify Refund Transaction is successful \", ()=> {\r",
                      " Refund();\r",
                      "   });\r",
                      "}\r",
                      "  else{\r",
                      "     postman.setNextRequest();\r",
                      "}\r",
                      "\r",
                      "function Refund() {\r",
                      "try{\r",
                      "pm.response.to.have.status(200);\r",
                      "pm.collectionVariables.set(\"payPalRefundRef\", jsonData.refundResponses[0].refundTransactionRef); \r",
                      "pm.collectionVariables.set(\"creditCardRefundRef\", jsonData.refundResponses[1].refundTransactionRef); \r",
                      "pm.expect(jsonData.refundResponses[0].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "pm.expect(jsonData.refundResponses[0].externalServiceCode).to.be.oneOf([\"00\"],[\"100\"]);\r",
                      "pm.expect(jsonData.refundResponses[1].externalServiceMessage).to.be.oneOf([\"ACCEPTED\",\"APPROVED\",\"ACCEPT\"]);\r",
                      "pm.expect(jsonData.refundResponses[1].externalServiceCode).to.be.oneOf([\"00\",\"100\"]);\r",
                      "} catch(e) {\r",
                      "    postman.setNextRequest();\r",
                      "    throw e;\r",
                      "}\r",
                      "}\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "80336515-5324-49f3-beb7-3db82596cdd2"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d21a40e8-9213-4423-94aa-cc1e96f5d32b"
                  }
                }
              ],
              "id": "fdb8da74-1653-4955-9b89-71a6acf8e395",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "{{ApiKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-bypass-rate-limit",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"clientReference\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"orderNumber\": \"{{$randomInt}}{{$timestamp}}\",\r\n  \"refunds\": [\r\n    {\r\n      \"paymentTransactionRef\": \"{{payPalTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    },\r\n    {\r\n       \"paymentTransactionRef\": \"{{creditCardTransactionRef}}\",\r\n      \"amount\":{{Amount}}\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{Apigee Environment URL}}wow/v1/pay/refunds?group_results=true",
                  "host": [
                    "{{Apigee Environment URL}}wow"
                  ],
                  "path": [
                    "v1",
                    "pay",
                    "refunds"
                  ],
                  "query": [
                    {
                      "key": "group_results",
                      "value": "true"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "ec6d1d83-91ef-453c-99d2-719af05fd3d3"
        }
      ],
      "id": "8a992fa1-d90c-49d4-a92d-db17636fe75c"
    }
  ],
  "variable": [
    {
      "id": "f662e8fd-a0dd-4a37-a709-97888e9178bd",
      "key": "accessToken",
      "value": ""
    },
    {
      "id": "53d79ed4-245a-4544-a3eb-5ea3dab934e3",
      "key": "creditCardItemID",
      "value": ""
    },
    {
      "id": "719ba12c-9750-40ca-a8d4-b77c5067e14e",
      "key": "sessionID",
      "value": ""
    },
    {
      "id": "ca00fb12-0237-4a75-a4d6-7288c576c366",
      "key": "payPalItemID",
      "value": ""
    },
    {
      "id": "6f19e627-5c3c-425c-b734-dbf8fdc18920",
      "key": "creditCardTransactionRef",
      "value": ""
    },
    {
      "id": "f3dce7f1-122b-4d85-ba91-3936e331e9f4",
      "key": "payPalTransactionRef",
      "value": ""
    },
    {
      "id": "b4e76918-9562-4f14-a141-9106fc69db13",
      "key": "suffix",
      "value": ""
    },
    {
      "id": "d0d6b10d-7d07-4ff8-80a9-f8260d6ce417",
      "key": "bin",
      "value": ""
    },
    {
      "id": "28728cb0-e1fb-47f0-8aab-99cae093271a",
      "key": "payPalRefundRef",
      "value": ""
    },
    {
      "id": "0082e591-341f-401d-a1b1-ddb03d8c876d",
      "key": "creditCardRefundRef",
      "value": ""
    }
  ]
}